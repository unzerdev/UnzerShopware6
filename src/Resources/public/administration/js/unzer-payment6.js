(this.webpackJsonp=this.webpackJsonp||[]).push([["unzer-payment6"],{"/l2X":function(e,t){e.exports='{% block sw_order_create_details_footer_payment_method %}\n    <sw-entity-single-select size="small"\n        entity="payment_method"\n        v-model="context.paymentMethodId"\n        class="sw-order-create-details-footer__item"\n        :disabled="!isCustomerActive"\n        :criteria="paymentMethodCriteria"\n        :label="$tc(\'sw-order.createBase.detailsFooter.labelPaymentMethod\')"\n        :placeholder="$tc(\'sw-order.createBase.detailsFooter.placeholderPaymentMethod\')"></sw-entity-single-select>\n{% endblock %}\n'},"0V2l":function(e,t){e.exports='{% block sw_settings_content_card_slot_plugins %}\n    {% parent %}\n\n    <sw-settings-item :label="$tc(\'unzer-payment-settings.module.title\')"\n                      :to="{ name: \'unzer.payment.configuration.settings\' }"\n                      :backgroundEnabled="false">\n        <template #icon>\n            <img class="unzer-payment-icon" :src="\'unzerpayment6/plugin.png\' | asset">\n        </template>\n    </sw-settings-item>\n{% endblock %}\n'},"1TPr":function(e,t){e.exports='{% block unzer_payment_actions %}\n    <sw-container columns="1fr 1fr" gap="0 10px" v-on:click.native.stop>\n        {% block unzer_payment_actions_amount_field %}\n            <div class="unzer-payment-actions--input">\n                <sw-number-field\n                    numberType="float"\n                    :min="0.00"\n                    :max="maxTransactionAmount"\n                    :digits="decimalPrecision"\n                    :disabled="maxTransactionAmount <= 0"\n                    v-model="transactionAmount">\n                </sw-number-field>\n            </div>\n        {% endblock %}\n\n        <div class="unzer-payment-actions--button">\n            {% block unzer_payment_actions_charge_button %}\n                <sw-button-process :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0" :isLoading="isLoading" :processSuccess="isSuccessful" v-if="isChargePossible" @click="charge">\n                    {{ $tc(\'unzer-payment.paymentDetails.actions.chargeButton\') }}\n                </sw-button-process>\n            {% endblock %}\n\n            {% block unzer_payment_actions_refund_button %}\n                <sw-button-process :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0" :isLoading="isLoading" :processSuccess="isSuccessful" v-else-if="isRefundPossible" @click="refund">\n                    {{ $tc(\'unzer-payment.paymentDetails.actions.refundButton\') }}\n                </sw-button-process>\n            {% endblock %}\n\n            {% block unzer_payment_actions_default_button %}\n                <sw-button :disabled="true" v-else>\n                    {{ $tc(\'unzer-payment.paymentDetails.actions.defaultButton\') }}\n                </sw-button>\n            {% endblock %}\n\n            {% block unzer_payment_actions_button_container_inner %}{% endblock %}\n        </div>\n    </sw-container>\n{% endblock %}\n'},"2bHK":function(e,t){e.exports='{% block unzer_payment_detail %}\n    <sw-card class="unzer-payment-detail" :title="$tc(\'unzer-payment.paymentDetails.detail.cardTitle\')">\n        <template>\n            {% block unzer_payment_detail_container %}\n                <sw-container columns="1fr 1fr" gap="0 20px">\n                    {% block unzer_payment_detail_container_left %}\n                        <sw-description-list class="unzer-payment-detail">\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountRemaining\') }}</dt>\n                            <dd>{{ remainingAmount | currency(paymentResource.currency) }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountCancelled\') }}</dt>\n                            <dd>{{ cancelledAmount | currency(paymentResource.currency) }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountCharged\') }}</dt>\n                            <dd>{{ chargedAmount | currency(paymentResource.currency) }}</dd>\n\n                            {% block unzer_payment_detail_container_left_inner %}{% endblock %}\n                        </sw-description-list>\n                    {% endblock %}\n\n                    {% block unzer_payment_detail_container_right %}\n                        <sw-description-list class="unzer-payment-detail">\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.shortId\') }}</dt>\n                            <dd>{{ paymentResource.shortId }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.id\') }}</dt>\n                            <dd>{{ paymentResource.id }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.state\') }}</dt>\n                            <dd>{{ paymentResource.state.name }}</dd>\n\n                            {% block unzer_payment_detail_container_right_inner %}{% endblock %}\n                        </sw-description-list>\n                    {% endblock %}\n                </sw-container>\n            {% endblock %}\n        </template>\n\n        {% block unzer_payment_detail_footer %}\n            <template #footer v-if="paymentResource.isShipmentAllowed">\n                {% block unzer_payment_detail_ship_button %}\n                    <sw-button-process :isLoading="isLoading" :processSuccess="isSuccessful" @click="ship">\n                        {{ $tc(\'unzer-payment.paymentDetails.actions.shipButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},"80rO":function(e,t){const{Application:n}=Shopware,s=Shopware.Classes.ApiService;class a extends s{constructor(e,t,n="unzer-payment"){super(e,t,n)}fetchPaymentDetails(e){const t=`_action/${this.getApiBasePath()}/transaction/${e}/details`;return this.httpClient.get(t,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}chargeTransaction(e,t,n){const a=`_action/${this.getApiBasePath()}/transaction/${e}/charge/${n}`;return this.httpClient.get(a,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}refundTransaction(e,t,n){const a=`_action/${this.getApiBasePath()}/transaction/${e}/refund/${t}/${n}`;return this.httpClient.get(a,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}ship(e){const t=`_action/${this.getApiBasePath()}/transaction/${e}/ship`;return this.httpClient.get(t,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}}n.addServiceProvider("UnzerPaymentService",e=>{const t=n.getContainer("init");return new a(t.httpClient,e.loginService)})},BAs4:function(e){e.exports=JSON.parse('{"unzer-payment":{"tabTitle":"Unzer Payment","paymentDetails":{"history":{"cardTitle":"Zahlungsverlauf","column":{"type":"Typ","amount":"Betrag","date":"Datum"},"type":{"authorization":"Reservierung","charge":"Einzug","shipment":"Versandmitteilung","cancellation":"Rückerstattung","default":""}},"actions":{"chargeButton":"Einziehen","shipButton":"Versandmitteilung","refundButton":"Rückerstatten","defaultButton":"Erledigt"},"detail":{"cardTitle":"Zahlungsdetails","shortId":"Short-ID","id":"Zahlungs-ID","state":"Status","amountRemaining":"Betrag (Rest)","amountCancelled":"Betrag (Rückerstattet)","amountCharged":"Betrag (Eingezogen)"},"metadata":{"cardTitle":"Metadaten","column":{"key":"Schlüssel","value":"Wert"}},"basket":{"cardTitle":"Warenkorb","column":{"quantity":"Anzahl","title":"Titel","amountGross":"Betrag (brutto)","amountNet":"Betrag (netto)"}},"notifications":{"genericErrorMessage":"Es ist ein Fehler aufgetreten!","refundSuccessTitle":"Rückerstatten","refundSuccessMessage":"Die Rückerstattung wurde erfolgreich durchgeführt.","refundErrorTitle":"Rückerstatten","chargeSuccessTitle":"Einziehen","chargeSuccessMessage":"Das Einziehen der Zahlung wurde erfolgreich durchgeführt.","chargeErrorTitle":"Einziehen","shipSuccessTitle":"Versandmitteilung","shipSuccessMessage":"Die Versandmitteilung wurde erfolgreich gesendet.","shipErrorTitle":"Versandmitteilung","invoiceNotFoundMessage":"Zu dieser Bestellung wurde keine Rechnung gefunden","couldNotRetrieveMessage":"Die Zahlungsdetails konnten nicht abgerufen werden, bitte prüfen Sie die Logdateien für weitere Informationen."}},"order-list":{"transactionId":"Unzer Transaktions ID"}},"unzer-payment-settings":{"module":{"title":"Unzer Payment","description":"Unzer Payment"},"form":{"message":{"success":{"title":"Test erfolgreich","message":"Die angegebenen API-Zugangsdaten sind korrekt!"},"error":{"title":"Test fehlgeschlagen","message":"Die angegebenen API-Zugangsdaten sind nicht korrekt! Bitte korrigieren Sie die Eingabe und versuchen Sie es erneut."}},"testButton":"API Zugangsdaten testen","webhookButton":"Webhooks registrieren"},"modal":{"close":"Schließen","webhook":{"title":"Webhooks","httpsInfo":"Webhooks können nur für HTTPS-Domains registriert werden.","submit":{"register":"Webhooks registrieren","clear":"Webhooks entfernen"}}},"webhook":{"messagePrefix":"Domain: ","register":{"done":"Webhook registriert | Webhooks registriert","error":"Der Webhook konnte nicht registriert werden | Die Webhooks konnten nicht registriert werden"},"clear":{"done":"Webhook entfernt | Webhooks entfernt","error":"Der Webhook konnte nicht entfernt werden | Die Webhooks konnten nicht entfernt werden"},"missing":{"fields":"Nicht alle benötigten Felder sind vorhanden","context":"Der Kontext konnte nicht aktualisiert werden","selection":"Es wurden keine Domains selektiert"},"notFound":{"salesChannelDomain":"Die spezifizierte Domain wurde nicht gefunden"},"globalError":{"title":"Ein Fehler ist aufgetreten","message":"Bitte kontaktieren sie uns für mehr Informationen"}}}}')},EL09:function(e,t,n){var s=n("Uda0");"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);(0,n("SZ7m").default)("7e00617d",s,!0,{})},EtgZ:function(e,t,n){"use strict";n.r(t);var s=n("1TPr"),a=n.n(s);n("FCMP");const{Component:i,Mixin:o}=Shopware;i.register("unzer-payment-actions",{template:a.a,inject:["UnzerPaymentService"],mixins:[o.getByName("notification")],data:()=>({isLoading:!1,isSuccessful:!1,transactionAmount:0}),props:{transactionResource:{type:Object,required:!0},paymentResource:{type:Object,required:!0},decimalPrecision:{type:Number,required:!0,default:4}},computed:{isChargePossible:function(){return"authorization"===this.transactionResource.type},isRefundPossible:function(){return"charge"===this.transactionResource.type},maxTransactionAmount(){let e=0;return this.isRefundPossible&&(e=this.transactionResource.amount),this.isChargePossible&&(e=this.paymentResource.amount.remaining),this.transactionResource.remainingAmount&&(e=this.transactionResource.remainingAmount),e/10**this.paymentResource.amount.decimalPrecision}},created(){this.transactionAmount=this.maxTransactionAmount},methods:{charge(){this.isLoading=!0,this.UnzerPaymentService.chargeTransaction(this.paymentResource.orderId,this.transactionResource.id,this.transactionAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.chargeSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.chargeSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.message;"generic-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.chargeErrorTitle"),message:t}),this.isLoading=!1})},refund(){this.isLoading=!0,this.UnzerPaymentService.refundTransaction(this.paymentResource.orderId,this.transactionResource.id,this.transactionAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.refundSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.refundSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.message;"generic-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.refundErrorTitle"),message:t}),this.isLoading=!1})}}});var r=n("2bHK"),c=n.n(r);const{Component:l,Mixin:u,Module:m}=Shopware;l.register("unzer-payment-detail",{template:c.a,inject:["UnzerPaymentService"],mixins:[u.getByName("notification")],data:()=>({isLoading:!1,isSuccessful:!1}),props:{paymentResource:{type:Object,required:!0}},computed:{unzerMaxDigits(){const e=m.getModuleRegistry().get("unzer-payment");return e&&e.manifest?e.manifest.maxDigits:4},remainingAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.remaining,this.paymentResource.amount.decimalPrecision):0},cancelledAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.cancelled,this.paymentResource.amount.decimalPrecision):0},chargedAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.charged,this.paymentResource.amount.decimalPrecision):0}},methods:{ship(){this.isLoading=!0,this.UnzerPaymentService.ship(this.paymentResource.orderId).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.shipSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.shipSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.message;"generic-error"===t?t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage"):"invoice-missing-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.invoiceNotFoundMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.shipErrorTitle"),message:t}),this.isLoading=!1})},formatAmount(e,t){return e/10**Math.min(this.unzerMaxDigits,t)}}});var d=n("HD1Z"),p=n.n(d);const{Component:h,Module:g}=Shopware;h.register("unzer-payment-history",{template:p.a,inject:["repositoryFactory"],props:{paymentResource:{type:Object,required:!0}},computed:{unzerMaxDigits(){const e=g.getModuleRegistry().get("unzer-payment");return e&&e.manifest?e.manifest.maxDigits:4},orderTransactionRepository:function(){return this.repositoryFactory.create("order_transaction")},decimalPrecision(){return this.paymentResource&&this.paymentResource.amount&&this.paymentResource.amount.decimalPrecision?Math.min(this.unzerMaxDigits,this.paymentResource.amount.decimalPrecision):this.unzerMaxDigits},data:function(){const e=[];return Object.values(this.paymentResource.transactions).forEach(t=>{const n=this.$options.filters.currency(this.formatAmount(parseFloat(t.amount),this.decimalPrecision),this.paymentResource.currency),s=this.$options.filters.date(t.date,{hour:"numeric",minute:"numeric",second:"numeric"});e.push({type:this.transactionTypeRenderer(t.type),amount:n,date:s,resource:t})}),e},columns:function(){return[{property:"type",label:this.$tc("unzer-payment.paymentDetails.history.column.type"),rawData:!0},{property:"amount",label:this.$tc("unzer-payment.paymentDetails.history.column.amount"),rawData:!0},{property:"date",label:this.$tc("unzer-payment.paymentDetails.history.column.date"),rawData:!0}]}},methods:{transactionTypeRenderer:function(e){switch(e){case"authorization":return this.$tc("unzer-payment.paymentDetails.history.type.authorization");case"charge":return this.$tc("unzer-payment.paymentDetails.history.type.charge");case"shipment":return this.$tc("unzer-payment.paymentDetails.history.type.shipment");case"cancellation":return this.$tc("unzer-payment.paymentDetails.history.type.cancellation");default:return this.$tc("unzer-payment.paymentDetails.history.type.default")}},reloadPaymentDetails:function(){this.$emit("reload")},formatAmount:(e,t)=>e/10**t}});var y=n("Yzic"),f=n.n(y);const{Component:b}=Shopware;b.register("unzer-payment-metadata",{template:f.a,props:{paymentResource:{type:Object,required:!0}},computed:{data:function(){const e=[];return this.paymentResource.metadata.forEach(t=>{e.push({key:t.key,value:t.value})}),e},columns:function(){return[{property:"key",label:this.$tc("unzer-payment.paymentDetails.metadata.column.key"),rawData:!0},{property:"value",label:this.$tc("unzer-payment.paymentDetails.metadata.column.value"),rawData:!0}]}}});var k=n("QO2X"),z=n.n(k);const{Component:w}=Shopware;w.register("unzer-payment-basket",{template:z.a,props:{paymentResource:{type:Object,required:!0}},computed:{data:function(){const e=[];return this.paymentResource.basket.basketItems.forEach(t=>{let n=this.$options.filters.currency(parseFloat(t.amountGross),this.paymentResource.currency),s=this.$options.filters.currency(parseFloat(t.amountNet),this.paymentResource.currency);t.amountDiscount>0&&(n=this.$options.filters.currency(-1*parseFloat(t.amountDiscount),this.paymentResource.currency),s=this.$options.filters.currency(-1*parseFloat(t.amountDiscount-t.amountVat),this.paymentResource.currency)),e.push({quantity:t.quantity,title:t.title,amountGross:n,amountNet:s})}),e},columns:function(){return[{property:"quantity",label:this.$tc("unzer-payment.paymentDetails.basket.column.quantity"),rawData:!0},{property:"title",label:this.$tc("unzer-payment.paymentDetails.basket.column.title"),rawData:!0},{property:"amountGross",label:this.$tc("unzer-payment.paymentDetails.basket.column.amountGross"),rawData:!0},{property:"amountNet",label:this.$tc("unzer-payment.paymentDetails.basket.column.amountNet"),rawData:!0}]}}});var _=n("/l2X"),S=n.n(_);const{Criteria:D}=Shopware.Data;Shopware.Component.override("sw-order-create-details-footer",{template:S.a,computed:{paymentMethodCriteria(){const e=new D;return this.salesChannelId&&e.addFilter(D.equals("salesChannels.id",this.salesChannelId)),e.addFilter(D.not("AND",[D.contains("handlerIdentifier","UnzerPayment6\\Components")])),e}}});var v=n("ZVAa"),C=n.n(v);const{Component:R,Context:$}=Shopware,{Criteria:P}=Shopware.Data;R.override("sw-order-detail",{template:C.a,data:()=>({isUnzerPayment:!1}),computed:{showTabs:()=>!0},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return void(this.isUnzerPayment=!1);const e=this.repositoryFactory.create("order"),t=new P(1,1);t.addAssociation("transactions"),e.get(this.orderId,$.api,t).then(e=>{e.transactions.forEach(e=>{e.customFields&&(e.customFields.unzer_payment_is_transaction||e.customFields.heidelpay_is_transaction)&&(this.isUnzerPayment=!0)})})},immediate:!0}}});var T=n("KyST"),A=n.n(T);Shopware.Component.override("sw-order-list",{template:A.a,computed:{orderColumns(){return this.getEnhancedOrderColumns()}},methods:{getEnhancedOrderColumns(){const e=this.getOrderColumns();return e.splice(1,0,{property:"unzerPaymentTransactionId",label:"unzer-payment.order-list.transactionId",allowResize:!0}),e}}});var x=n("HZZH"),M=n.n(x);const{Component:B,Context:E,Mixin:I}=Shopware,{Criteria:L}=Shopware.Data;B.register("unzer-payment-tab",{template:M.a,inject:["UnzerPaymentService","repositoryFactory"],mixins:[I.getByName("notification")],data:()=>({paymentResources:[],isLoading:!0}),created(){this.createdComponent()},computed:{orderRepository(){return this.repositoryFactory.create("order")}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},methods:{createdComponent(){this.loadData()},resetDataAttributes(){this.paymentResources=[],this.isLoading=!0},reloadPaymentDetails(){this.resetDataAttributes(),this.loadData()},loadData(){const e=this.$route.params.id,t=new L;t.addAssociation("transactions"),this.orderRepository.get(e,E.api,t).then(e=>{this.order=e,e.transactions&&e.transactions.forEach(e=>{e.customFields&&(e.customFields.unzer_payment_is_transaction||e.customFields.heidelpay_is_transaction)&&this.UnzerPaymentService.fetchPaymentDetails(e.id).then(e=>{this.isLoading=!1,this.paymentResources.push(e)}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage"),message:this.$tc("unzer-payment.paymentDetails.notifications.couldNotRetrieveMessage")}),this.isLoading=!1})})})}}});var F=n("BAs4"),N=n("swu4");const{Module:W}=Shopware;W.register("unzer-payment",{type:"plugin",name:"UnzerPayment",title:"unzer-payment.general.title",description:"unzer-payment.general.descriptionTextModule",version:"0.0.1",targetVersion:"0.0.1",maxDigits:4,snippets:{"de-DE":F,"en-GB":N},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"unzer-payment-tab",name:"unzer-payment.payment.detail",path:"/sw/order/detail/:id/unzer-payment",isChildren:!0,meta:{parentPath:"sw.order.index"}}),e(t)}});var U=n("HBbI"),Z=n.n(U);n("wH4t");Shopware.Component.register("unzer-payment-register-webhook",{template:Z.a,mixins:[Shopware.Mixin.getByName("notification")],inject:["repositoryFactory","UnzerPaymentConfigurationService"],computed:{salesChannelDomainColumns:()=>[{property:"id",dataIndex:"id",label:"ID"},{property:"url",dataIndex:"url",label:"URL"}],salesChannelDomainRepository(){return this.repositoryFactory.create("sales_channel_domain")}},data:()=>({isModalActive:!1,isLoading:!1,isRegistering:!1,isRegistrationSuccessful:!1,isClearing:!1,isClearingSuccessful:!1,salesChannelDomains:[],selection:[]}),created(){this.salesChannelDomainRepository.search(new Shopware.Data.Criteria,Shopware.Context.api).then(e=>{this.salesChannelDomains=e})},methods:{openModal(){this.isModalActive=!0},closeModal(){this.isModalActive=!1},registerWebhooks(){const e=this;this.isRegistrationSuccessful=!1,this.isRegistering=!0,this.isLoading=!0,this.UnzerPaymentConfigurationService.registerWebhooks({selection:this.selection}).then(t=>{e.isRegistrationSuccessful=!0,void 0!==t&&e.messageGeneration(t)}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.webhook.globalError.title"),message:this.$tc("unzer-payment-settings.webhook.globalError.message")})}).finally(()=>{e.isLoading=!1,e.isRegistering=!1})},clearWebhooks(){const e=this;this.isClearingSuccessful=!1,this.isClearing=!0,this.isLoading=!0,this.UnzerPaymentConfigurationService.clearWebhooks({selection:this.selection}).then(t=>{e.isClearingSuccessful=!0,void 0!==t&&e.messageGeneration(t)}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.webhook.globalError.title"),message:this.$tc("unzer-payment-settings.webhook.globalError.message")})}).finally(()=>{e.isLoading=!1,e.isClearing=!1})},onRegistrationFinished(){this.isRegistrationSuccessful=!1},onClearingFinished(){this.isClearingSuccessful=!1},onSelectItem(e){this.selection=e},messageGeneration(e){const t=e.length;Object.keys(e).forEach(n=>{e[n].success?this.createNotificationSuccess({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n}):this.createNotificationError({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n})})}}});var H=n("0V2l"),V=n.n(H);n("Zk9A");const{Component:O}=Shopware;O.override("sw-settings-index",{template:V.a});var q=n("h6sH"),j=n.n(q);const{Component:G,Mixin:K}=Shopware,{Criteria:Q}=Shopware.Data,{object:J,types:X}=Shopware.Utils;G.register("unzer-payment-settings",{template:j.a,mixins:[K.getByName("notification"),K.getByName("sw-inline-snippet")],inject:["repositoryFactory","UnzerPaymentConfigurationService"],data:()=>({isLoading:!1,isTesting:!1,isTestSuccessful:!1,isSaveSuccessful:!1,config:{},showWebhookModal:!1}),metaInfo:()=>({title:"UnzerPayment"}),computed:{paymentMethodRepository(){return this.repositoryFactory.create("payment_method")}},methods:{getConfigValue(e){const t=this.$refs.systemConfig.actualConfigData.null;return this.config["UnzerPayment6.settings."+e]||t["UnzerPayment6.settings."+e]},onValidateCredentials(){this.isTestSuccessful=!1,this.isTesting=!0;const e={publicKey:this.getConfigValue("publicKey"),privateKey:this.getConfigValue("privateKey"),salesChannel:this.$refs.systemConfig.currentSalesChannelId};this.UnzerPaymentConfigurationService.validateCredentials(e).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment-settings.form.message.success.title"),message:this.$tc("unzer-payment-settings.form.message.success.message")}),this.isTestSuccessful=!0,this.isTesting=!1}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.form.message.error.title"),message:this.$tc("unzer-payment-settings.form.message.error.message")}),this.isTesting=!1})},onTestFinished(){this.isTestSuccessful=!1},onSave(){this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("sw-plugin-config.messageSaveSuccess")}),this.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("global.default.error"),message:e}),this.isLoading=!1})},onConfigChange(e){this.config=e},getBind(e,t){let n;return t!==this.config&&(this.config=t),this.$refs.systemConfig.config.forEach(t=>{t.elements.forEach(t=>{t.name!==e.name||(n=t)})}),n||e},getElementBind(e){const t=J.deepCopyObject(e);return null!==this.currentSalesChannelId&&this.inherit&&this.actualConfigData.hasOwnProperty("null")&&null!==this.actualConfigData.null[t.name]&&("single-select"===t.type||"sw-entity-single-select"===t.config.componentName?t.placeholder=this.$tc("sw-settings.system-config.inherited"):"bool"===t.type?t.config.inheritedValue=this.actualConfigData.null[t.name]||!1:"password"===t.type?(t.placeholderIsPassword=!0,t.placeholder=""+this.actualConfigData.null[t.name]):"multi-select"===t.type||X.isUndefined(this.actualConfigData.null[t.name])||(t.placeholder=""+this.actualConfigData.null[t.name])),["single-select","multi-select"].includes(t.type)&&(t.config.labelProperty="name",t.config.valueProperty="id"),t},getDeliveryStatusCriteria(){const e=new Q(1,100);return e.addFilter(Q.equals("stateMachine.technicalName","order_delivery.state")),e},openWebhookModal(){this.showWebhookModal=!0},closeWebhookModal(){this.showWebhookModal=!1}}});const{Module:Y}=Shopware;Y.register("unzer-payment-configuration",{type:"plugin",name:"UnzerPayment",title:"unzer-payment-settings.module.title",description:"unzer-payment-settings.module.description",version:"1.0.3",targetVersion:"1.0.3",snippets:{"de-DE":F,"en-GB":N},routes:{settings:{component:"unzer-payment-settings",path:"settings",meta:{parentPath:"sw.settings.index"}}}});n("80rO"),n("qSV5"),n("EL09")},FCMP:function(e,t,n){var s=n("iP7k");"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);(0,n("SZ7m").default)("0993e7ac",s,!0,{})},HBbI:function(e,t){e.exports='{% block unzer_payment_payment_register_webhook %}\n    <div class="register-webhook--container">\n        {% block unzer_payment_payment_register_webhook_button %}\n            <sw-button-process\n                :isLoading="isRegistering"\n                :disabled="isLoading"\n                :processSuccess="isRegistrationSuccessful"\n                @process-finish="onRegistrationFinished()"\n                @click="openModal">\n                {{ $tc(\'unzer-payment-settings.form.webhookButton\') }}\n            </sw-button-process>\n        {% endblock %}\n\n        {% block unzer_payment_payment_register_webhook_modal %}\n            <sw-modal v-if="isModalActive" @modal-close="closeModal"\n                      :title="$tc(`unzer-payment-settings.modal.webhook.title`)"\n                      class="unzer-payment-detail--webhook-modal">\n\n                <template #default>\n                    <sw-alert\n                        variant="info"\n                        appearance="default"\n                        :showIcon="true"\n                        :closable="false">\n                        {{ $tc(\'unzer-payment-settings.modal.webhook.httpsInfo\') }}\n                    </sw-alert>\n\n                    <sw-data-grid\n                        v-on:select-item="onSelectItem"\n                        :dataSource="salesChannelDomains"\n                        :columns="salesChannelDomainColumns"\n                        :showActions="false"\n                        :showSelection="true">\n                    </sw-data-grid>\n                </template>\n\n                <template #modal-footer>\n                    <sw-button :disabled="isLoading" @click="closeModal">\n                        {{ $tc(\'unzer-payment-settings.modal.close\') }}\n                    </sw-button>\n\n                    <sw-button-process\n                        @click="clearWebhooks"\n                        @process-finish="onClearingFinished()"\n                        :isLoading="isLoading" :processSuccess="isClearingSuccessful" :disabled="isLoading"\n                        variant="primary">\n                        {{ $tc(\'unzer-payment-settings.modal.webhook.submit.clear\') }}\n                    </sw-button-process>\n\n                    <sw-button-process\n                        @click="registerWebhooks"\n                        @process-finish="onRegistrationFinished()"\n                        :isLoading="isLoading" :processSuccess="isRegistrationSuccessful" :disabled="isLoading"\n                        variant="primary">\n                        {{ $tc(\'unzer-payment-settings.modal.webhook.submit.register\') }}\n                    </sw-button-process>\n                </template>\n            </sw-modal>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},HD1Z:function(e,t){e.exports='{% block unzer_payment_history %}\n    <sw-card :title="$tc(\'unzer-payment.paymentDetails.history.cardTitle\')">\n        {% block unzer_payment_history_container %}\n            <template #grid>\n                {% block unzer_payment_history_data_grid %}\n                    <sw-data-grid\n                        :dataSource="data"\n                        :columns="columns"\n                        :showSelection="false"\n                        sortBy="date">\n\n                        {% block unzer_payment_history_actions %}\n                            <template #actions="{ item }">\n                                {% block unzer_payment_history_data_grid_item_actions %}\n                                    <unzer-payment-actions\n                                        :transactionResource="item.resource"\n                                        :paymentResource="paymentResource"\n                                        :decimalPrecision="decimalPrecision"\n                                        @reload="reloadPaymentDetails">\n                                    </unzer-payment-actions>\n                                {% endblock %}\n                            </template>\n                        {% endblock %}\n                    </sw-data-grid>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},HZZH:function(e,t){e.exports='{% block unzer_payment_payment_details %}\n    <div class="unzer-payment-detail">\n        <div v-if="!isLoading">\n            {% block unzer_payment_payment_details_content %}\n                <template v-for="paymentResource in paymentResources">\n                    {% block unzer_payment_payment_details_content_payment_detail %}\n                        <unzer-payment-detail\n                            :paymentResource="paymentResource"\n                            @reload="reloadPaymentDetails">\n                        </unzer-payment-detail>\n                    {% endblock %}\n\n                    {% block unzer_payment_payment_details_content_payment_history %}\n                        <unzer-payment-history\n                            :paymentResource="paymentResource"\n                            @reload="reloadPaymentDetails">\n                        </unzer-payment-history>\n                    {% endblock %}\n\n                    {% block unzer_payment_payment_details_content_payment_basket %}\n                        <unzer-payment-basket\n                            :paymentResource="paymentResource"\n                            @reload="reloadPaymentDetails">\n                        </unzer-payment-basket>\n                    {% endblock %}\n\n                    {% block unzer_payment_payment_details_content_payment_metadata %}\n                        <unzer-payment-metadata\n                            :paymentResource="paymentResource"\n                            @reload="reloadPaymentDetails">\n                        </unzer-payment-metadata>\n                    {% endblock %}\n\n                    {% block unzer_payment_payment_details_content_inner %}{% endblock %}\n                </template>\n            {% endblock %}\n        </div>\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </div>\n{% endblock %}\n'},KyST:function(e,t){e.exports='{% block sw_order_list_grid_columns %}\n    {% parent %}\n\n    {% block unzer_payment_column_transaction %}\n        <template #column-unzerPaymentTransactionId="{ item }">\n            <b v-if="item.transactions.last().customFields && item.transactions.last().customFields.unzer_payment_is_transaction">\n                {{ item.transactions.last().id }}\n            </b>\n        </template>\n    {% endblock %}\n{% endblock %}\n'},MCmV:function(e,t,n){},QO2X:function(e,t){e.exports='{% block unzer_payment_basket %}\n    <sw-card class="unzer-payment-basket" :title="$tc(\'unzer-payment.paymentDetails.basket.cardTitle\')">\n        <template #grid>\n            {% block unzer_payment_basket_container %}\n                <sw-data-grid\n                    :dataSource="data"\n                    :columns="columns"\n                    :showSelection="false"\n                    :showActions="false">\n                </sw-data-grid>\n            {% endblock %}\n        </template>\n    </sw-card>\n{% endblock %}\n'},Uda0:function(e,t,n){},Yzic:function(e,t){e.exports='{% block unzer_payment_metadata %}\n    <sw-card class="unzer-payment-metadata" :title="$tc(\'unzer-payment.paymentDetails.metadata.cardTitle\')">\n        <template #grid>\n            {% block unzer_payment_metadata_container %}\n                <sw-data-grid\n                    :dataSource="data"\n                    :columns="columns"\n                    :showSelection="false"\n                    :showActions="false">\n                </sw-data-grid>\n            {% endblock %}\n        </template>\n    </sw-card>\n{% endblock %}\n'},ZVAa:function(e,t){e.exports="{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    {% block unzer_payment_payment_tab %}\n        <sw-tabs-item v-if=\"isUnzerPayment\"\n                      :route=\"{ name: 'unzer-payment.payment.detail', params: { id: $route.params.id } }\"\n                      :title=\"$tc('unzer-payment.tabTitle')\">\n            {{ $tc('unzer-payment.tabTitle') }}\n        </sw-tabs-item>\n    {% endblock %}\n{% endblock %}\n"},Zk9A:function(e,t,n){var s=n("MCmV");"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);(0,n("SZ7m").default)("5472f3c7",s,!0,{})},h6sH:function(e,t){e.exports='{% block unzer_payment_settings %}\n    <sw-page class="unzer-payment-settings">\n        {% block unzer_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                    {{ $tc(\'unzer-payment-settings.module.title\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block unzer_payment_settings_actions %}\n            <template #smart-bar-actions>\n                {% block unzer_payment_settings_actions_save %}\n                    <sw-button-process\n                        class="sw-settings-login-registration__save-action"\n                        :isLoading="isLoading"\n                        :disabled="isLoading || isTesting"\n                        :processSuccess="isSaveSuccessful"\n                        variant="primary"\n                        @click="onSave">\n                        {{ $tc(\'global.default.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block unzer_payment_settings_actions_test %}\n                    <sw-button-process\n                        :isLoading="isTesting || isLoading"\n                        :disabled="isLoading || isTesting"\n                        :processSuccess="isTestSuccessful"\n                        @process-finish="onTestFinished()"\n                        @click="onValidateCredentials">\n                        {{ $tc(\'unzer-payment-settings.form.testButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block unzer_payment_settings_actions_register_webhooks %}\n                    <unzer-payment-register-webhook></unzer-payment-register-webhook>\n                {% endblock %}\n\n            </template>\n        {% endblock %}\n\n        {% block unzer_payment_settings_content %}\n            <template #content>\n                <sw-card-view>\n                    <sw-system-config\n                        ref="systemConfig"\n                        salesChannelSwitchable\n                        inherit\n                        @config-changed="onConfigChange"\n                        domain="UnzerPayment6.settings">\n\n                        <template #card-element="{ element, config }">\n                            <div>\n                                <sw-form-field-renderer\n                                    :config="{\n                                        componentName: \'sw-entity-single-select\',\n                                        label: getInlineSnippet(getElementBind(getBind(element, config)).config.label),\n                                        helpText: getInlineSnippet(getElementBind(getBind(element, config)).config.helpText),\n                                        entity: \'state_machine_state\',\n                                        criteria: getDeliveryStatusCriteria(),\n                                    }"\n                                    v-model="config[element.name]"\n                                    v-if="element.name.endsWith(\'statusForAutomaticShippingNotification\')">\n                                </sw-form-field-renderer>\n\n                                <sw-form-field-renderer\n                                    v-bind="getElementBind(getBind(element, config))"\n                                    v-model="config[element.name]"\n                                    v-else>\n                                </sw-form-field-renderer>\n                            </div>\n                        </template>\n                    </sw-system-config>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},iP7k:function(e,t,n){},qSV5:function(e,t){const{Application:n}=Shopware,s=Shopware.Classes.ApiService;class a extends s{constructor(e,t,n="unzer-payment"){super(e,t,n)}validateCredentials(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-credentials`,e,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}registerWebhooks(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/register-webhooks`,e,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}clearWebhooks(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/clear-webhooks`,e,{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}}n.addServiceProvider("UnzerPaymentConfigurationService",e=>{const t=n.getContainer("init");return new a(t.httpClient,e.loginService)})},swu4:function(e){e.exports=JSON.parse('{"unzer-payment":{"tabTitle":"Unzer Payment","paymentDetails":{"history":{"cardTitle":"Payment History","column":{"type":"Type","amount":"Amount","date":"Date"},"type":{"authorization":"Authorization","charge":"Charging","shipment":"Shipping notification","cancellation":"Refund","default":""}},"actions":{"chargeButton":"Charge","shipButton":"Shipping notice","refundButton":"Refund","defaultButton":"Done"},"detail":{"cardTitle":"Payment Details","shortId":"Short-ID","id":"Payment-ID","state":"State","amountRemaining":"Amount (Remaining)","amountCancelled":"Amount (Cancelled)","amountCharged":"Amount (Charged)"},"metadata":{"cardTitle":"Metadata","column":{"key":"Key","value":"Value"}},"basket":{"cardTitle":"Basket","column":{"quantity":"Quantity","title":"Title","amountGross":"Amount (gross)","amountNet":"Amount (net)"}},"notifications":{"genericErrorMessage":"An error has occurred!","refundSuccessTitle":"Refund","refundSuccessMessage":"The reimbursement was successfully completed.","refundErrorTitle":"Refund","chargeSuccessTitle":"Charge","chargeSuccessMessage":"The collection of the payment was carried out successfully.","chargeErrorTitle":"Charge","shipSuccessTitle":"Shipping notice","shipSuccessMessage":"The shipping notification was successfully sent.","shipErrorTitle":"Shipping notice","invoiceNotFoundMessage":"No invoice was found for this order.","couldNotRetrieveMessage":"The payment details could not be retrieved, please check the log files for more information."}},"order-list":{"transactionId":"Unzer transaction ID"}},"unzer-payment-settings":{"module":{"title":"Unzer Payment","description":"Unzer Payment"},"form":{"message":{"success":{"title":"Test succeeded","message":"The provided credentials are valid!"},"error":{"title":"Test failed","message":"API Credentials are invalid, please correct them and try again!"}},"testButton":"Test API credentials","webhookButton":"Register webhooks"},"modal":{"close":"Close","webhook":{"title":"Webhooks","httpsInfo":"Webhooks can only be registered for HTTPS domains.","submit":{"register":"Register webhooks","clear":"Clear webhooks"}}},"webhook":{"messagePrefix":"Domain: ","register":{"done":"Webhook registered | Webhooks registered","error":"Webhook could not be registered | Webhooks could not be registered"},"clear":{"done":"Webhook cleared | Webhooks cleared","error":"Webhook could not be cleared | Webhooks could not be cleared"},"missing":{"fields":"Some mandatory fields are missing","context":"The context could not be refreshed","selection":"No domain was selected"},"notFound":{"salesChannelDomain":"The selected domain could not be found"},"globalError":{"title":"An error has occurred!","message":"Please contact us for more information"}}}}')},tQGD:function(e,t,n){},wH4t:function(e,t,n){var s=n("tQGD");"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);(0,n("SZ7m").default)("83ff209e",s,!0,{})}},[["EtgZ","runtime","vendors-node"]]]);