(function(){var e={633:function(){},257:function(){},612:function(){},885:function(){},443:function(){let{Application:e}=Shopware,t=Shopware.Classes.ApiService;class n extends t{constructor(e,t,n="unzer-payment"){super(e,t,n)}checkCertificates(e){let n=`_action/${this.getApiBasePath()}/apple-pay/certificates`;return e&&(n+=`/${e}`),this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}async updateCertificates(e,n,a,i){let s=`_action/${this.getApiBasePath()}/apple-pay/certificates`;e&&(s+=`/${e}`);let r={};for(let e in n)if(n[e]){let t=n[e];r[e]=await t.text()}return(a&&(r.inheritMerchantIdentification=!0),i&&(r.inheritPaymentProcessing=!0),0===r.length)?new Promise:this.httpClient.post(s,r,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}}e.addServiceProvider("UnzerPaymentApplePayService",t=>new n(e.getContainer("init").httpClient,t.loginService))},547:function(){let{Application:e}=Shopware,t=Shopware.Classes.ApiService;class n extends t{constructor(e,t,n="unzer-payment"){super(e,t,n)}validateCredentials(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-credentials`,e,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}registerWebhooks(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/register-webhooks`,e,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}clearWebhooks(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/clear-webhooks`,e,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}getWebhooks(e){return this.httpClient.post(`_action/${this.getApiBasePath()}/get-webhooks`,{privateKey:e},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}getGooglePayGatewayMerchantId(e){return this.httpClient.get(`_action/${this.getApiBasePath()}/get-google-pay-gateway-merchant-id?salesChannelId=${e||""}`,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}}e.addServiceProvider("UnzerPaymentConfigurationService",t=>new n(e.getContainer("init").httpClient,t.loginService))},962:function(){let{Application:e}=Shopware,t=Shopware.Classes.ApiService;class n extends t{constructor(e,t,n="unzer-payment"){super(e,t,n)}fetchPaymentDetails(e){let n=`_action/${this.getApiBasePath()}/transaction/${e}/details`;return this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}chargeTransaction(e,n,a){let i=`_action/${this.getApiBasePath()}/transaction/${e}/charge/${a}`;return this.httpClient.get(i,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}refundTransaction(e,n,a,i=null){let s=`_action/${this.getApiBasePath()}/transaction/${e}/refund/${n}/${a}`;return null!==i&&(s=`${s}/${i}`),this.httpClient.get(s,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}cancelTransaction(e,n,a){let i=`_action/${this.getApiBasePath()}/transaction/${e}/cancel/${n}/${a}`;return this.httpClient.get(i,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}ship(e){let n=`_action/${this.getApiBasePath()}/transaction/${e}/ship`;return this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}}e.addServiceProvider("UnzerPaymentService",t=>new n(e.getContainer("init").httpClient,t.loginService))},858:function(){let{Component:e}=Shopware,{Criteria:t}=Shopware.Data;e.extend("unzer-entity-single-select-delivery-status","sw-entity-single-select",{props:{criteria:{type:Object,required:!1,default(){let e=new t(1,100);return e.addFilter(t.equals("stateMachine.technicalName","order_delivery.state")),e}}}})},119:function(e,t,n){var a=n(633);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("ad0e5d12",a,!0,{})},569:function(e,t,n){var a=n(257);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("24d8f2ae",a,!0,{})},326:function(e,t,n){var a=n(612);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("6560ac9a",a,!0,{})},467:function(e,t,n){var a=n(885);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("76697e96",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],o={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(o):n.push(a[r]={id:r,parts:[o]})}return n}n.d(t,{Z:function(){return m}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,c=0,l=!1,d=function(){},p=null,u="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,n,i){l=n,p=i||{};var r=a(e,t);return y(r),function(t){for(var n=[],i=0;i<r.length;i++){var o=s[r[i].id];o.refs--,n.push(o)}t?y(r=a(e,t)):r=[];for(var i=0;i<n.length;i++){var o=n[i];if(0===o.refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete s[o.id]}}}}function y(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(f(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var r=[],i=0;i<n.parts.length;i++)r.push(f(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function g(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function f(e){var t,n,a=document.querySelector("style["+u+'~="'+e.id+'"]');if(a){if(l)return d;a.parentNode.removeChild(a)}if(h){var i=c++;t=w.bind(null,a=o||(o=g()),i,!1),n=w.bind(null,a,i,!0)}else t=k.bind(null,a=g()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function w(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=b(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function k(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),p.ssrId&&e.setAttribute(u,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/unzerpayment6/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/unzerpayment6/"),function(){"use strict";n(326);let{Component:e,Mixin:t}=Shopware;e.register("unzer-payment-actions",{template:'{% block unzer_payment_actions %}\n    <sw-container rows="1fr 2fr" gap="10px 0" v-on:click.native.stop>\n        {% block unzer_payment_actions_amount_field %}\n            <div class="unzer-payment-actions--input">\n                <sw-number-field\n                    numberType="float"\n                    :min="0.00"\n                    :max="maxTransactionAmount"\n                    :digits="decimalPrecision"\n                    :disabled="maxTransactionAmount <= 0"\n                    v-model:value="transactionAmount">\n                </sw-number-field>\n            </div>\n        {% endblock %}\n\n        <div class="unzer-payment-actions--button">\n            <sw-container rows="1fr 1fr" v-if="isChargePossible">\n                {% block unzer_payment_actions_charge_button %}\n                    <sw-button-process :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0" :isLoading="isLoading" :processSuccess="isSuccessful" @click="charge">\n                        {{ $tc(\'unzer-payment.paymentDetails.actions.chargeButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n                {% block unzer_payment_actions_cancel_button %}\n                    <sw-button-process :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0" :isLoading="isLoading" :processSuccess="isSuccessful" @click="startCancel" variant="ghost-danger">\n                        {{ $tc(\'unzer-payment.paymentDetails.actions.cancelButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </sw-container>\n\n            <sw-container rows="1fr 1fr" v-else-if="isRefundPossible">\n                {% block unzer_payment_actions_reason_field %}\n                    <sw-single-select :options="reasonCodeSelection"\n                                      :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0"\n                                      v-model:value="reasonCode"\n                                      :placeholder="$tc(\'unzer-payment.paymentDetails.actions.reason.placeholder\')"\n                                      :popoverClasses="[\'unzer-payment-actions--popover-options\']"\n                    >\n                    </sw-single-select>\n                {% endblock %}\n\n                {% block unzer_payment_actions_refund_button %}\n                    <sw-button-process :disabled="maxTransactionAmount <= 0 || transactionAmount <= 0" :isLoading="isLoading" :processSuccess="isSuccessful" @click="refund">\n                        {{ $tc(\'unzer-payment.paymentDetails.actions.refundButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </sw-container>\n\n            {% block unzer_payment_actions_default_button %}\n                <sw-button :disabled="true" v-else>\n                    {{ $tc(\'unzer-payment.paymentDetails.actions.defaultButton\') }}\n                </sw-button>\n            {% endblock %}\n\n            {% block unzer_payment_actions_button_container_inner %}{% endblock %}\n        </div>\n    </sw-container>\n{% endblock %}\n',inject:["UnzerPaymentService"],mixins:[t.getByName("notification")],data(){return{isLoading:!1,isSuccessful:!1,transactionAmount:0,reasonCode:null}},props:{transactionResource:{type:Object,required:!0},paymentResource:{type:Object,required:!0},decimalPrecision:{type:Number,required:!0,default:4}},computed:{isChargePossible:function(){return"authorization"===this.transactionResource.type},isRefundPossible:function(){return"charge"===this.transactionResource.type},maxTransactionAmount(){let e=0;return this.isRefundPossible&&(e=this.transactionResource.amount),this.isChargePossible&&(e=this.paymentResource.amount.remaining),"remainingAmount"in this.transactionResource&&(e=this.transactionResource.remainingAmount),e/10**this.paymentResource.amount.decimalPrecision},reasonCodeSelection(){return[{label:this.$tc("unzer-payment.paymentDetails.actions.reason.cancel"),value:"CANCEL"},{label:this.$tc("unzer-payment.paymentDetails.actions.reason.credit"),value:"CREDIT"},{label:this.$tc("unzer-payment.paymentDetails.actions.reason.return"),value:"RETURN"}]}},created(){this.transactionAmount=this.maxTransactionAmount},methods:{charge(){this.isLoading=!0,this.UnzerPaymentService.chargeTransaction(this.paymentResource.orderId,this.transactionResource.id,this.transactionAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.chargeSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.chargeSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.errors[0];"generic-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage")),"paylater-invoice-document-required"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.paylaterInvoiceDocumentRequiredErrorMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.chargeErrorTitle"),message:t}),this.isLoading=!1})},refund(){this.isLoading=!0,this.UnzerPaymentService.refundTransaction(this.paymentResource.orderId,this.transactionResource.id,this.transactionAmount,this.reasonCode).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.refundSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.refundSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.errors[0];"generic-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.refundErrorTitle"),message:t}),this.isLoading=!1})},startCancel(){this.$emit("cancel",this.transactionAmount)}}});let{Component:a,Mixin:i,Module:s}=Shopware;a.register("unzer-payment-detail",{template:'{% block unzer_payment_detail %}\n    <sw-card class="unzer-payment-detail" :title="$tc(\'unzer-payment.paymentDetails.detail.cardTitle\')">\n        <template>\n            {% block unzer_payment_detail_container %}\n                <sw-container columns="1fr 1fr" gap="0 20px">\n                    {% block unzer_payment_detail_container_left %}\n                        <sw-description-list class="unzer-payment-detail">\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountRemaining\') }}</dt>\n                            <dd>{{ formatCurrency(remainingAmount) }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountCancelled\') }}</dt>\n                            <dd>{{ formatCurrency(cancelledAmount) }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.amountCharged\') }}</dt>\n                            <dd>{{ formatCurrency(chargedAmount) }}</dd>\n\n                            {% block unzer_payment_detail_container_left_inner %}{% endblock %}\n                        </sw-description-list>\n                    {% endblock %}\n\n                    {% block unzer_payment_detail_container_right %}\n                        <sw-description-list class="unzer-payment-detail">\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.shortId\') }}</dt>\n                            <dd>{{ paymentResource.shortId }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.id\') }}</dt>\n                            <dd>{{ paymentResource.id }}</dd>\n\n                            <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.state\') }}</dt>\n                            <dd>{{ paymentResource.state.name }}</dd>\n\n                            <span v-if="isPaylaterPaymentMethod(paymentResource.paymentMethodId)">\n                                <dt>{{ $tc(\'unzer-payment.paymentDetails.detail.descriptor\') }}</dt>\n                                <dd>{{ paymentResource.descriptor }}</dd>\n                            </span>\n\n                            {% block unzer_payment_detail_container_right_inner %}{% endblock %}\n                        </sw-description-list>\n                    {% endblock %}\n                </sw-container>\n            {% endblock %}\n        </template>\n\n        {% block unzer_payment_detail_footer %}\n            <template #footer v-if="paymentResource.isShipmentAllowed">\n                {% block unzer_payment_detail_ship_button %}\n                    <sw-button-process :isLoading="isLoading" :processSuccess="isSuccessful" @click="ship">\n                        {{ $tc(\'unzer-payment.paymentDetails.actions.shipButton\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["UnzerPaymentService"],mixins:[i.getByName("notification")],data(){return{isLoading:!1,isSuccessful:!1,paylaterPaymentMethods:["09588ffee8064f168e909ff31889dd7f","12fbfbce271a43a89b3783453b88e9a6","6d6adcd4b7bf40499873c294a85f32ed"]}},props:{paymentResource:{type:Object,required:!0}},computed:{unzerMaxDigits(){let e=s.getModuleRegistry().get("unzer-payment");return e&&e.manifest?e.manifest.maxDigits:4},remainingAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.remaining,this.paymentResource.amount.decimalPrecision):0},cancelledAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.cancelled,this.paymentResource.amount.decimalPrecision):0},chargedAmount(){return this.paymentResource&&this.paymentResource.amount?this.formatAmount(this.paymentResource.amount.charged,this.paymentResource.amount.decimalPrecision):0}},methods:{reloadOrderDetail(){this.$emit("reloadOrderDetails")},ship(){this.isLoading=!0,this.UnzerPaymentService.ship(this.paymentResource.orderId).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.shipSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.shipSuccessMessage")}),this.isSuccessful=!0,this.$emit("reload")}).catch(e=>{let t=e.response.data.errors[0];"generic-error"===t?t=this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage"):"invoice-missing-error"===t?t=this.$tc("unzer-payment.paymentDetails.notifications.invoiceNotFoundMessage"):"documentdate-missing-error"===t?t=this.$tc("unzer-payment.paymentDetails.notifications.documentDateMissingError"):"payment-missing-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.paymentMissingError")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.shipErrorTitle"),message:t}),this.isLoading=!1})},formatAmount(e,t){return e/10**Math.min(this.unzerMaxDigits,t)},formatCurrency(e){return Shopware.Utils.format.currency(e||0,this.paymentResource.currency)},isPaylaterPaymentMethod(e){return this.paylaterPaymentMethods.indexOf(e)>=0}}});let{Component:r,Module:o,Mixin:c}=Shopware;r.register("unzer-payment-history",{template:'{% block unzer_payment_history %}\n    <sw-card :title="$tc(\'unzer-payment.paymentDetails.history.cardTitle\')">\n        {% block unzer_payment_history_container %}\n            <template #grid>\n                {% block unzer_payment_history_data_grid %}\n                    <sw-data-grid\n                        :dataSource="data"\n                        :columns="columns"\n                        :showSelection="false"\n                        sortBy="date">\n\n                        {% block unzer_payment_history_actions %}\n                            <template #actions="{ item }">\n                                {% block unzer_payment_history_data_grid_item_actions %}\n                                    <unzer-payment-actions\n                                        :transactionResource="item.resource"\n                                        :paymentResource="paymentResource"\n                                        :decimalPrecision="decimalPrecision"\n                                        @reload="reload"\n                                        @cancel="(cancelAmount) => { openCancelModal(item, cancelAmount) }">\n                                    </unzer-payment-actions>\n                                {% endblock %}\n                            </template>\n                        {% endblock %}\n\n                        {% block unzer_payment_history_actions_modals %}\n                            <template #action-modals="{ item }">\n                                <sw-modal\n                                        v-if="showCancelModal === item.resource.id"\n                                        :showHeader="false"\n                                        :isLoading="isCancelLoading"\n                                >\n                                    <p>\n                                        {{ $t(\'unzer-payment.paymentDetails.actions.confirmCancelModal.text\') }}<br/>\n                                        {{ $t(\'unzer-payment.paymentDetails.actions.confirmCancelModal.amountLabel\') }} {{ formatCurrency(cancelAmount) }}\n                                    </p>\n\n                                    <template #modal-footer>\n\n                                        {% block sw_confirm_modal_footer_cancel %}\n                                            <sw-button\n                                                    class="sw-confirm-modal__button-cancel"\n                                                    size="small"\n                                                    @click="closeCancelModal"\n                                            >\n                                                {{ $t(\'unzer-payment.paymentDetails.actions.confirmCancelModal.noButton\') }}\n                                            </sw-button>\n                                        {% endblock %}\n\n                                        {% block sw_confirm_modal_footer_confirm %}\n                                            <sw-button\n                                                    class="sw-confirm-modal__button-confirm"\n                                                    variant="danger"\n                                                    size="small"\n                                                    @click="cancel"\n                                            >\n                                                {{ $t(\'unzer-payment.paymentDetails.actions.confirmCancelModal.yesButton\') }}\n                                            </sw-button>\n                                        {% endblock %}\n\n                                    </template>\n                                </sw-modal>\n                            </template>\n                        {% endblock %}\n\n                    </sw-data-grid>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["repositoryFactory","UnzerPaymentService"],mixins:[c.getByName("notification")],data(){return{showCancelModal:!1,isCancelLoading:!1,cancelAmount:0}},props:{paymentResource:{type:Object,required:!0}},computed:{unzerMaxDigits(){let e=o.getModuleRegistry().get("unzer-payment");return e&&e.manifest?e.manifest.maxDigits:4},orderTransactionRepository:function(){return this.repositoryFactory.create("order_transaction")},decimalPrecision(){return this.paymentResource&&this.paymentResource.amount&&this.paymentResource.amount.decimalPrecision?Math.min(this.unzerMaxDigits,this.paymentResource.amount.decimalPrecision):this.unzerMaxDigits},data:function(){let e=[];return Object.values(this.paymentResource.transactions).forEach(t=>{let n=this.formatCurrency(this.formatAmount(parseFloat(t.amount),this.decimalPrecision)),a=Shopware.Filter.getByName("date")(t.date,{hour:"numeric",minute:"numeric",second:"numeric"});e.push({type:this.transactionTypeRenderer(t.type),amount:n,date:a,resource:t})}),e},columns:function(){return[{property:"type",label:this.$tc("unzer-payment.paymentDetails.history.column.type"),rawData:!0},{property:"amount",label:this.$tc("unzer-payment.paymentDetails.history.column.amount"),rawData:!0},{property:"date",label:this.$tc("unzer-payment.paymentDetails.history.column.date"),rawData:!0}]}},methods:{transactionTypeRenderer:function(e){switch(e){case"authorization":return this.$tc("unzer-payment.paymentDetails.history.type.authorization");case"charge":return this.$tc("unzer-payment.paymentDetails.history.type.charge");case"shipment":return this.$tc("unzer-payment.paymentDetails.history.type.shipment");case"refund":return this.$tc("unzer-payment.paymentDetails.history.type.refund");case"cancellation":return this.$tc("unzer-payment.paymentDetails.history.type.cancellation");default:return this.$tc("unzer-payment.paymentDetails.history.type.default")}},reload:function(){this.$emit("reload"),this.$emit("reloadOrderDetails")},formatAmount(e,t){return e/10**t},openCancelModal(e,t){this.showCancelModal=e.resource.id,this.cancelAmount=t},closeCancelModal(){this.showCancelModal=!1,this.cancelAmount=0},cancel(){this.isCancelLoading=!0,this.UnzerPaymentService.cancelTransaction(this.paymentResource.orderId,this.paymentResource.id,this.cancelAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment.paymentDetails.notifications.cancelSuccessTitle"),message:this.$tc("unzer-payment.paymentDetails.notifications.cancelSuccessMessage")}),this.reload()}).catch(e=>{let t=e.response.data.errors[0];"generic-error"===t&&(t=this.$tc("unzer-payment.paymentDetails.notifications.cancelErrorMessage")),this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.cancelErrorTitle"),message:t}),this.isCancelLoading=!1})},formatCurrency(e){return Shopware.Utils.format.currency(e||0,this.paymentResource.currency)}}});let{Component:l}=Shopware;l.register("unzer-payment-metadata",{template:'{% block unzer_payment_metadata %}\n    <sw-card class="unzer-payment-metadata" :title="$tc(\'unzer-payment.paymentDetails.metadata.cardTitle\')">\n        <template #grid>\n            {% block unzer_payment_metadata_container %}\n                <sw-data-grid\n                    :dataSource="data"\n                    :columns="columns"\n                    :showSelection="false"\n                    :showActions="false">\n                </sw-data-grid>\n            {% endblock %}\n        </template>\n    </sw-card>\n{% endblock %}\n',props:{paymentResource:{type:Object,required:!0}},computed:{data:function(){let e=[];return this.paymentResource.metadata.forEach(t=>{e.push({key:t.key,value:t.value})}),e},columns:function(){return[{property:"key",label:this.$tc("unzer-payment.paymentDetails.metadata.column.key"),rawData:!0},{property:"value",label:this.$tc("unzer-payment.paymentDetails.metadata.column.value"),rawData:!0}]}}});let{Component:d}=Shopware;d.register("unzer-payment-basket",{template:'{% block unzer_payment_basket %}\n    <sw-card class="unzer-payment-basket" :title="$tc(\'unzer-payment.paymentDetails.basket.cardTitle\')">\n        <template #grid>\n            {% block unzer_payment_basket_container %}\n                <sw-data-grid\n                    :dataSource="data"\n                    :columns="columns"\n                    :showSelection="false"\n                    :showActions="false">\n                </sw-data-grid>\n            {% endblock %}\n        </template>\n    </sw-card>\n{% endblock %}\n',props:{paymentResource:{type:Object,required:!0}},computed:{data:function(){let e=[];return this.paymentResource.basket.basketItems.forEach(t=>{let n=this.formatCurrency(parseFloat(t.amountGross.toFixed(2))),a=this.formatCurrency(parseFloat(t.amountNet.toFixed(2)));t.amountDiscount>0&&(n=this.formatCurrency(-1*parseFloat(t.amountDiscount.toFixed(2))),a=this.formatCurrency(-1*parseFloat((t.amountDiscount-t.amountVat).toFixed(2)))),e.push({quantity:t.quantity,title:t.title,amountGross:n,amountNet:a})}),e},columns:function(){return[{property:"quantity",label:this.$tc("unzer-payment.paymentDetails.basket.column.quantity"),rawData:!0},{property:"title",label:this.$tc("unzer-payment.paymentDetails.basket.column.title"),rawData:!0},{property:"amountGross",label:this.$tc("unzer-payment.paymentDetails.basket.column.amountGross"),rawData:!0},{property:"amountNet",label:this.$tc("unzer-payment.paymentDetails.basket.column.amountNet"),rawData:!0}]}},methods:{formatCurrency(e){return Shopware.Utils.format.currency(e||0,this.paymentResource.currency)}}});let{Criteria:p}=Shopware.Data,u=["bc4c2cbfb5fda0bf549e4807440d0a54","4673044aff79424a938d42e9847693c3","713c7a332b432dcd4092701eda522a7e","5123af5ce94a4a286641973e8de7eb60","17830aa7e6a00b99eab27f0e45ac5e0d","4ebb99451f36ba01f13d5871a30bce2c","d4b90a17af62c1bb2f6c3b1fed339425","4b9f8d08b46a83839fd0eb14fe00efe6","08fb8d9a72ab4ca62b811e74f2eca79f","6cc3b56ce9b0f80bd44039c047282a41","614ad722a03ee96baa2446793143215b","409fe641d6d62a4416edd6307d758791","085b64d0028a8bd447294e03c4eb411a","cd6f59d572e6c90dff77a48ce16b44db","95aa098aac8f11e9a2a32a2ae2dbcce4","fd96d03535a46d197f5adac17c9f8bac","09588ffee8064f168e909ff31889dd7f"];Shopware.Component.override("sw-order-create-details-footer",{template:'{% block sw_order_create_details_footer_payment_method %}\n    <sw-entity-single-select size="small"\n        entity="payment_method"\n        v-model="context.paymentMethodId"\n        class="sw-order-create-details-footer__item"\n        :disabled="!isCustomerActive"\n        :criteria="paymentMethodCriteria"\n        :label="$tc(\'sw-order.createBase.detailsFooter.labelPaymentMethod\')"\n        :placeholder="$tc(\'sw-order.createBase.detailsFooter.placeholderPaymentMethod\')"></sw-entity-single-select>\n{% endblock %}\n',computed:{paymentMethodCriteria(){let e=new p;return this.salesChannelId&&e.addFilter(p.equals("salesChannels.id",this.salesChannelId)),e.addFilter(p.not("AND",[p.equalsAny("id",u)])),e}}});let{Component:h,Context:m}=Shopware,{Criteria:y}=Shopware.Data;h.override("sw-order-detail",{template:"{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    {% block unzer_payment_payment_tab %}\n        <sw-tabs-item v-if=\"isUnzerPayment\"\n                      :route=\"{ name: 'unzer-payment.payment.detail', params: { id: $route.params.id } }\"\n                      :title=\"$tc('unzer-payment.tabTitle')\">\n            {{ $tc('unzer-payment.tabTitle') }}\n        </sw-tabs-item>\n    {% endblock %}\n{% endblock %}\n",data(){return{isUnzerPayment:!1}},computed:{showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.isUnzerPayment=!1;return}let e=this.repositoryFactory.create("order"),t=new y(1,1);t.addAssociation("transactions"),e.get(this.orderId,m.api,t).then(e=>{e.transactions.forEach(e=>{e.customFields&&(e.customFields.unzer_payment_is_transaction||e.customFields.heidelpay_is_transaction)&&(this.isUnzerPayment=!0)})})},immediate:!0}}}),Shopware.Component.override("sw-order-list",{template:'{% block sw_order_list_grid_columns %}\n    {% parent %}\n\n    {% block unzer_payment_column_transaction %}\n        <template #column-unzerPaymentTransactionId="{ item }">\n            <span v-if="item.transactions && item.transactions.last() && item.transactions.last().customFields && item.transactions.last().customFields.unzer_payment_is_transaction">\n                {{ item.transactions.last().id }}\n            </span>\n        </template>\n    {% endblock %}\n{% endblock %}\n',methods:{getOrderColumns(){let e=this.$super("getOrderColumns");return e.splice(1,0,{property:"unzerPaymentTransactionId",label:"unzer-payment.order-list.transactionId",allowResize:!0}),e}}});let{Component:g,Context:f,Mixin:b}=Shopware,{Criteria:w}=Shopware.Data;g.register("unzer-payment-tab",{template:'{% block unzer_payment_payment_details %}\n    <div class="unzer-payment-detail">\n        <div v-if="!isLoading">\n            {% block unzer_payment_payment_details_content %}\n                <template v-for="paymentResource in paymentResources">\n                    <template v-if="paymentResource">\n                        {% block unzer_payment_payment_details_content_payment_detail %}\n                            <unzer-payment-detail\n                                :paymentResource="paymentResource"\n                                @reload="reloadPaymentDetails"\n                                @reloadOrderDetails="reloadOrderDetails">\n                            </unzer-payment-detail>\n                        {% endblock %}\n\n                        {% block unzer_payment_payment_details_content_payment_history %}\n                            <unzer-payment-history\n                                :paymentResource="paymentResource"\n                                @reload="reloadPaymentDetails"\n                                @reloadOrderDetails="reloadOrderDetails">\n                            </unzer-payment-history>\n                        {% endblock %}\n\n                        {% block unzer_payment_payment_details_content_payment_basket %}\n                            <unzer-payment-basket\n                                :paymentResource="paymentResource"\n                                @reload="reloadPaymentDetails">\n                            </unzer-payment-basket>\n                        {% endblock %}\n\n                        {% block unzer_payment_payment_details_content_payment_metadata %}\n                            <unzer-payment-metadata\n                                :paymentResource="paymentResource"\n                                @reload="reloadPaymentDetails">\n                            </unzer-payment-metadata>\n                        {% endblock %}\n\n                        {% block unzer_payment_payment_details_content_inner %}{% endblock %}\n                    </template>\n                </template>\n            {% endblock %}\n        </div>\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </div>\n{% endblock %}\n',inject:["UnzerPaymentService","repositoryFactory"],mixins:[b.getByName("notification")],data(){return{paymentResources:[],loadedResources:0,isLoading:!0}},created(){this.createdComponent()},computed:{orderRepository(){return this.repositoryFactory.create("order")}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},methods:{createdComponent(){this.loadData()},resetDataAttributes(){this.paymentResources=[],this.loadedResources=0,this.isLoading=!0},reloadPaymentDetails(){this.resetDataAttributes(),this.loadData()},loadData(){let e=this.$route.params.id,t=new w;t.getAssociation("transactions").addSorting(w.sort("createdAt","DESC")),this.orderRepository.get(e,f.api,t).then(e=>{this.order=e,e.transactions&&e.transactions.forEach((e,t)=>{if(!e.customFields||!e.customFields.unzer_payment_is_transaction&&!e.customFields.heidelpay_is_transaction){this.loadedResources++;return}this.UnzerPaymentService.fetchPaymentDetails(e.id).then(e=>{this.paymentResources[t]=e,this.loadedResources++,this.isLoading=this.order.transactions.length!==this.loadedResources}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment.paymentDetails.notifications.genericErrorMessage"),message:this.$tc("unzer-payment.paymentDetails.notifications.couldNotRetrieveMessage")}),this.isLoading=!1})})})},reloadOrderDetails(){setTimeout(()=>{this.findOrderDetailComponentAndReInit()},5e3)},async findOrderDetailComponentAndReInit(e=this){let t=e.$parent;return void 0===t?null:"sw-order-detail"!==t.$options.name?this.findOrderDetailComponentAndReInit(t):t.isOrderEditing?null:void t.createdComponent()}}});var k=JSON.parse('{"unzer-payment":{"tabTitle":"Unzer Payment","paymentDetails":{"history":{"cardTitle":"Zahlungsverlauf","column":{"type":"Typ","amount":"Betrag","date":"Datum"},"type":{"authorization":"Reservierung","charge":"Einzug","shipment":"Versandmitteilung","refund":"R\xfcckerstattung","cancellation":"Stornierung","default":""}},"actions":{"reason":{"placeholder":"Grund","cancel":"Abgebrochen","credit":"Gutschrift","return":"R\xfcckgabe"},"chargeButton":"Einziehen","shipButton":"Versandmitteilung","refundButton":"R\xfcckerstatten","defaultButton":"Erledigt","cancelButton":"Stornieren","confirmCancelModal":{"text":"M\xf6chten Sie wirklich die Reservierung \xfcber den angegebenen Betrag stornieren?","amountLabel":"Betrag:","yesButton":"Ja","noButton":"Nein"}},"detail":{"cardTitle":"Zahlungsdetails","shortId":"Short-ID","id":"Zahlungs-ID","state":"Status","amountRemaining":"Betrag (Rest)","amountCancelled":"Betrag (R\xfcckerstattet)","amountCharged":"Betrag (Eingezogen)","descriptor":"Verwendungszweck"},"metadata":{"cardTitle":"Metadaten","column":{"key":"Schl\xfcssel","value":"Wert"}},"basket":{"cardTitle":"Warenkorb","column":{"quantity":"Anzahl","title":"Titel","amountGross":"Betrag (brutto)","amountNet":"Betrag (netto)"}},"notifications":{"genericErrorMessage":"Es ist ein Fehler aufgetreten!","refundSuccessTitle":"R\xfcckerstatten","refundSuccessMessage":"Die R\xfcckerstattung wurde erfolgreich durchgef\xfchrt.","refundErrorTitle":"R\xfcckerstatten","chargeSuccessTitle":"Einziehen","chargeSuccessMessage":"Das Einziehen der Zahlung wurde erfolgreich durchgef\xfchrt.","chargeErrorTitle":"Einziehen","shipSuccessTitle":"Versandmitteilung","shipSuccessMessage":"Die Versandmitteilung wurde erfolgreich gesendet.","shipErrorTitle":"Versandmitteilung","invoiceNotFoundMessage":"Zu dieser Bestellung wurde keine Rechnung gefunden","couldNotRetrieveMessage":"Die Zahlungsdetails konnten nicht abgerufen werden, bitte pr\xfcfen Sie die Logdateien f\xfcr weitere Informationen.","documentDateMissingError":"Das Datum der Rechnung ist leer.","paymentMissingError":"Die Zahlung konnte nicht gefunden werden","paylaterInvoiceDocumentRequiredErrorMessage":"Bitte erstellen oder hinterlegen Sie zun\xe4chst eine Rechnung f\xfcr die Bestellung.","cancelSuccessTitle":"Stornierung","cancelErrorTitle":"Stornierung","cancelSuccessMessage":"Die Stornierung wurde erfolgreich durchgef\xfchrt.","cancelErrorMessage":"Die Stornierung konnte nicht durchgef\xfchrt werden."}},"order-list":{"transactionId":"Unzer Transaktions ID"},"methods":{"paylaterInvoice":{"b2b-eur":"Rechnungskauf B2B EUR","b2b-chf":"Rechnungskauf B2B CHF","b2c-eur":"Rechnungskauf B2C EUR","b2c-chf":"Rechnungskauf B2C CHF"},"paylaterInstallment":{"b2c-eur":"Ratenkauf B2C EUR","b2c-chf":"Ratenkauf B2C CHF"},"paylaterDirectDebitSecured":{"b2c-eur":"Lastschrift B2C EUR"}}},"unzer-payment-settings":{"module":{"title":"Unzer Payment","description":"Unzer Payment"},"apple-pay":{"certificates":{"title":"Apple Pay Zertifikate (Veraltet)","textExisting":"Wir haben unsere Integration mit Apple Pay aktualisiert, aber da Sie sie bereits eingerichtet haben, brauchen Sie im Moment nichts zu tun.<br><br>Wenn Ihre Apple-Pay-Zertifikate jedoch bald ablaufen, k\xf6nnen Sie auf die neue Integration umsteigen.<br><br>Sie k\xf6nnen nat\xfcrlich auch jetzt schon auf die neue Integration umsteigen, wenn Sie m\xf6chten, und m\xfcssen sich dann in Zukunft keine Gedanken mehr \xfcber ablaufende Zertifikate, einen Wechsel der Integration usw. machen.","textAll":"Bevor Sie Apple Pay aktivieren, stellen Sie bitte sicher, dass Sie unsere <a href=\'https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/#prerequisites-for-accepting-apple-pay-transactions\' target=\'_blank\'>Checkliste</a> gelesen haben.","check":{"paymentProcessingValid":{"true":"Das Payment Processing-Zertifikat ist vorhanden und g\xfcltig","false":"Das Payment Processing-Zertifikat fehlt"},"paymentProcessingActive":{"true":"Das Payment Processing-Zertifikat ist aktiv","false":"Das Payment Processing-Zertifikat ist nicht aktiv"},"merchantIdentificationValid":{"true":"Das Merchant Identification-Zertifikat ist vorhanden","false":"Das Merchant Identification-Zertifikat fehlt"},"merchantIdentificationValidUntil":{"true":"Das Merchant Identification-Zertifikat ist g\xfcltig","false":"Das Merchant Identification-Zertifikat ist abgelaufen und muss erneuert werden"}},"update":{"success":{"title":"Erfolg","message":"Die Zertifikate wurden erfolgreich aktualisiert"},"error":{"title":"Fehler","message":"Bei der Aktualisierung der Zertifikate trat ein Fehler auf","messageInvalidCertificate":"Die \xfcbergebenen Zertifikatsdaten f\xfcr {type} sind ung\xfcltig","messageMissingCertificateFiles":"Die \xfcbergebenen Zertifikatsdaten f\xfcr {type} sind unvollst\xe4ndig"}}},"paymentProcessingCertificate":{"label":"Payment Processing Zertifikat (apple_pay.pem)","helpText":"Zertifikat und Schl\xfcssel m\xfcssen nach den Schritten der <a href=\\"https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/\\" target=\\"_blank\\" rel=\\"noopener\\">Unzer-Dokumentation</a> vorbereitet werden."},"paymentProcessingKey":{"label":"Payment Processing Zertifikatsschl\xfcssel (privatekey.key)"},"publicKey":{"changeNotice":"Bitte beachten: Nach dem \xc4ndern der Unzer Keys muss das Apple Pay Payment Processing Certificate neu hochgeladen werden."},"merchantIdentificationCertificate":{"label":"Merchant Identification Zertifikat (merchant_id.pem)","helpText":"Zertifikat und Schl\xfcssel m\xfcssen nach den Schritten der <a href=\\"https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/\\" target=\\"_blank\\" rel=\\"noopener\\">Unzer-Dokumentation</a> vorbereitet werden."},"merchantIdentificationKey":{"label":"Merchant Identification Zertifikatsschl\xfcssel (merchant_id.key)"}},"google-pay":{"gatewayMerchantId":"Gateway H\xe4ndler ID"},"form":{"message":{"success":{"title":"Test erfolgreich","message":"Die angegebenen API-Zugangsdaten sind korrekt!"},"error":{"title":"Test fehlgeschlagen","message":"Die angegebenen API-Zugangsdaten sind nicht korrekt! Bitte korrigieren Sie die Eingabe und versuchen Sie es erneut."}},"testButton":"API Zugangsdaten testen","webhookButton":"Webhooks registrieren","privateKey":"Private Key","publicKey":"Public Key"},"modal":{"close":"Schlie\xdfen","webhook":{"title":"Webhooks","httpsInfo":"Es kann nur eine HTTPS-Domain pro Verkaufskanal registriert werden.","registered":"Webhook ist bereits registriert","placeholder":"Bitte w\xe4hlen Sie eine Domain aus","submit":{"register":"Webhooks registrieren","clear":"Webhooks ausw\xe4hlen | Ausgew\xe4hlten Webhook entfernen | Entferne {count} Webhooks"}}},"webhook":{"messagePrefix":"Domain: ","register":{"done":"Webhook registriert | Webhooks registriert","error":"Der Webhook konnte nicht registriert werden | Die Webhooks konnten nicht registriert werden"},"clear":{"done":"Webhook entfernt | Webhooks entfernt","error":"Der Webhook konnte nicht entfernt werden | Die Webhooks konnten nicht entfernt werden"},"missing":{"fields":"Nicht alle ben\xf6tigten Felder sind vorhanden","context":"Der Kontext konnte nicht aktualisiert werden","selection":"Es wurden keine Domains selektiert"},"notFound":{"salesChannelDomain":"Die spezifizierte Domain wurde nicht gefunden"},"globalError":{"title":"Ein Fehler ist aufgetreten","message":"Bitte kontaktieren sie uns f\xfcr mehr Informationen"},"empty":"F\xfcr diesen Private Key sind keine Webhooks registriert. Bitte pr\xfcfen Sie ob dieser valide ist und ob Konfigurationen f\xfcr dedizierte Verkaufskan\xe4le vorgenommen wurden.","show":"Webhooks anzeigen"}},"sw-payment-card":{"deprecated":"Veraltet"}}'),C=JSON.parse('{"unzer-payment":{"tabTitle":"Unzer Payment","paymentDetails":{"history":{"cardTitle":"Payment History","column":{"type":"Type","amount":"Amount","date":"Date"},"type":{"authorization":"Authorization","charge":"Charging","shipment":"Shipping notification","refund":"Refund","cancellation":"Cancel","default":""}},"actions":{"reason":{"placeholder":"Reason","cancel":"Cancel","credit":"Credit","return":"Return"},"chargeButton":"Charge","shipButton":"Shipping notice","refundButton":"Refund","defaultButton":"Done","cancelButton":"Cancel","confirmCancelModal":{"text":"Do you really want to cancel the authorization of the selected amount?","amountLabel":"Amount:","yesButton":"Yes","noButton":"No"}},"detail":{"cardTitle":"Payment Details","shortId":"Short-ID","id":"Payment-ID","state":"State","amountRemaining":"Amount (Remaining)","amountCancelled":"Amount (Cancelled)","amountCharged":"Amount (Charged)","descriptor":"Descriptor"},"metadata":{"cardTitle":"Metadata","column":{"key":"Key","value":"Value"}},"basket":{"cardTitle":"Basket","column":{"quantity":"Quantity","title":"Title","amountGross":"Amount (gross)","amountNet":"Amount (net)"}},"notifications":{"genericErrorMessage":"An error has occurred!","refundSuccessTitle":"Refund","refundSuccessMessage":"The reimbursement was successfully completed.","refundErrorTitle":"Refund","chargeSuccessTitle":"Charge","chargeSuccessMessage":"The collection of the payment was carried out successfully.","chargeErrorTitle":"Charge","shipSuccessTitle":"Shipping notice","shipSuccessMessage":"The shipping notification was successfully sent.","shipErrorTitle":"Shipping notice","invoiceNotFoundMessage":"No invoice was found for this order.","couldNotRetrieveMessage":"The payment details could not be retrieved, please check the log files for more information.","documentDateMissingError":"Document date for invoice is empty.","paymentMissingError":"Payment could not be found","paylaterInvoiceDocumentRequiredErrorMessage":"Please create or upload an invoice for the order first.","cancelSuccessTitle":"Cancel","cancelErrorTitle":"Cancel","cancelSuccessMessage":"The reversal was successfully completed.","cancelErrorMessage":"The reversal could not be performed."}},"order-list":{"transactionId":"Unzer transaction ID"},"methods":{"paylaterInvoice":{"b2b-eur":"Invoice B2B EUR","b2b-chf":"Invoice B2B CHF","b2c-eur":"Invoice B2C EUR","b2c-chf":"Invoice B2C CHF"},"paylaterInstallment":{"b2c-eur":"Installment B2C EUR","b2c-chf":"Installment B2C CHF"},"paylaterDirectDebitSecured":{"b2c-eur":"Direct Debit B2C EUR"}}},"unzer-payment-settings":{"module":{"title":"Unzer Payment","description":"Unzer Payment"},"apple-pay":{"certificates":{"title":"Apple Pay Certificates (Deprecated)","textExisting":"We have updated our integration with Apple Pay, but since you already have it set up, you don\'t need to do anything just now.<br><br>However, when your Apple Pay certificates are about to expire, you can change to the new integration.<br><br>You can of course change to the new integration now, if you want, and then you don\'t have to worry about expiring certificates, changing integration, etc. in the future.","textAll":"Before you activate Apple Pay, please make sure you have read our <a href=\'https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/#prerequisites-for-accepting-apple-pay-transactions\' target=\'_blank\'>checklist</a>.","check":{"paymentProcessingValid":{"true":"The Payment Processing certificate is present and valid","false":"The Payment Processing certificate is missing"},"paymentProcessingActive":{"true":"The Payment Processing certificate is active","false":"The Payment Processing certificate is inactive"},"merchantIdentificationValid":{"true":"The Merchant Identification certificate is present","false":"The Merchant Identification certificate is missing"},"merchantIdentificationValidUntil":{"true":"The Merchant Identification certificate is valid","false":"The Merchant Identification certificate is expired and must be renewed"}},"update":{"success":{"title":"Success","message":"Certificates were updated successfully"},"error":{"title":"Error","message":"An error occurred during certificate update","messageInvalidCertificate":"The given certificate data for {type} is invalid","messageMissingCertificateFiles":"The given certificate data for {type} is incomplete"}}},"paymentProcessingCertificate":{"label":"Payment Processing Certificate","helpText":"Certificate and Key have to be prepared as specified in <a href=\\"https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/\\" target=\\"_blank\\" rel=\\"noopener\\">the Unzer documentation</a>."},"paymentProcessingKey":{"label":"Payment Processing Certificate Key (Private Key)"},"publicKey":{"changeNotice":"Please note: After changing the Unzer keys, you have to re-upload your Apple Pay Payment Processing Certificate."},"merchantIdentificationCertificate":{"label":"Merchant Identification Certificate","helpText":"Certificate and Key have to be prepared as specified in <a href=\\"https://docs.unzer.com/payment-methods/applepay/applepay-prerequisites/\\" target=\\"_blank\\" rel=\\"noopener\\">the Unzer documentation</a>."},"merchantIdentificationKey":{"label":"Merchant Identification Certificate Key (Private Key)"}},"google-pay":{"gatewayMerchantId":"Gateway Merchant ID"},"form":{"message":{"success":{"title":"Test succeeded","message":"The provided credentials are valid!"},"error":{"title":"Test failed","message":"API Credentials are invalid, please correct them and try again!"}},"testButton":"Test API credentials","webhookButton":"Register webhooks","privateKey":"Private Key","publicKey":"Public Key"},"modal":{"close":"Close","webhook":{"title":"Webhooks","httpsInfo":"Only one HTTPS domain per sales channel can be registered.","registered":"Webhook is already registered","placeholder":"Please select a domain","submit":{"register":"Register webhooks","clear":"Select items to clear | Clear selected webhook | Clear {count} webhooks"}}},"webhook":{"messagePrefix":"Domain: ","register":{"done":"Webhook registered | Webhooks registered","error":"Webhook could not be registered | Webhooks could not be registered"},"clear":{"done":"Webhook cleared | Webhooks cleared","error":"Webhook could not be cleared | Webhooks could not be cleared"},"missing":{"fields":"Some mandatory fields are missing","context":"The context could not be refreshed","selection":"No domain was selected"},"notFound":{"salesChannelDomain":"The selected domain could not be found"},"globalError":{"title":"An error has occurred!","message":"Please contact us for more information"},"empty":"There are no webhooks registered for this private key. Make sure the private key is valid and check for other specific sales channel configurations.","show":"Show webhooks"}},"sw-payment-card":{"deprecated":"Deprecated"}}');let{Module:v}=Shopware;v.register("unzer-payment",{type:"plugin",name:"UnzerPayment",title:"unzer-payment.general.title",description:"unzer-payment.general.descriptionTextModule",version:"0.0.1",targetVersion:"0.0.1",maxDigits:4,snippets:{"de-DE":k,"en-GB":C},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"unzer-payment-tab",name:"unzer-payment.payment.detail",path:"/sw/order/detail/:id/unzer-payment",isChildren:!0,meta:{parentPath:"sw.order.index"}}),e(t)}}),n(119);let P=Shopware.Data.Criteria;Shopware.Component.register("unzer-payment-register-webhook",{template:'{% block unzer_payment_payment_register_webhook %}\n    <div class="register-webhook--container">\n        {% block unzer_payment_payment_register_webhook_button %}\n            <sw-button-process\n                :isLoading="isRegistering || isLoading"\n                :disabled="isDisabled"\n                :processSuccess="isRegistrationSuccessful"\n                @process-finish="onRegistrationFinished()"\n                @click="openModal">\n                {{ $tc(\'unzer-payment-settings.form.webhookButton\') }}\n            </sw-button-process>\n        {% endblock %}\n\n        {% block unzer_payment_payment_register_webhook_modal %}\n            <sw-modal v-if="isModalActive" @modal-close="closeModal"\n                      :title="$tc(`unzer-payment-settings.modal.webhook.title`)"\n                      class="unzer-payment-detail--webhook-modal">\n\n                <template #default>\n                    <sw-alert\n                        variant="info"\n                        appearance="default"\n                        :showIcon="true"\n                        :closable="false">\n                        {{ $tc(\'unzer-payment-settings.modal.webhook.httpsInfo\') }}\n                    </sw-alert>\n\n                    <sw-card\n                        v-for="salesChannel in salesChannels"\n                        v-if="!selectedSalesChannelId || selectedSalesChannelId === salesChannel.id"\n                        :isLoading="isDataLoading"\n                        :key="salesChannel.id"\n                        :title="salesChannel.translated.name"\n                        :large="true"\n                        >\n\n                        <sw-entity-single-select\n                            v-if="!isWebhookRegisteredForSalesChannel(salesChannel.id)"\n                            v-model:value="selection[salesChannel.id]"\n                            :placeholder="$tc(`unzer-payment-settings.modal.webhook.placeholder`)"\n                            :criteria="getSalesChannelDomainCriteria(salesChannel.id)"\n                            entity="sales_channel_domain"\n                            label-property="url"\n                            @update:value="onSelectItem">\n                        </sw-entity-single-select>\n\n                        <sw-alert\n                            v-else\n                            variant="success"\n                            appearance="default"\n                            :showIcon="true"\n                            :closable="false">\n                            {{ $tc(\'unzer-payment-settings.modal.webhook.registered\') }}\n                        </sw-alert>\n                    </sw-card>\n\n                    <sw-pagination\n                        :total="salesChannels.total"\n                        :limit="salesChannels.total"\n                        :page="salesChannels.criteria.page"\n                        :steps="[2,10,25,100]"\n                        @page-change="onPageChange">\n                    </sw-pagination>\n\n                </template>\n\n                <template #modal-footer>\n\n                    <sw-button :disabled="isLoading" @click="closeModal">\n                        {{ $tc(\'unzer-payment-settings.modal.close\') }}\n                    </sw-button>\n\n                    <sw-button-process\n                        @click="registerWebhooks"\n                        @process-finish="onRegistrationFinished()"\n                        :isLoading="isLoading" :processSuccess="isRegistrationSuccessful" :disabled="isLoading"\n                        variant="primary">\n                        {{ $tc(\'unzer-payment-settings.modal.webhook.submit.register\') }}\n                    </sw-button-process>\n                </template>\n            </sw-modal>\n        {% endblock %}\n    </div>\n{% endblock %}\n',mixins:[Shopware.Mixin.getByName("notification")],inject:["repositoryFactory","UnzerPaymentConfigurationService"],props:{webhooks:{type:Array,required:!0},isLoading:{type:Boolean,required:!1},selectedSalesChannelId:{type:String,required:!1},privateKey:{type:String,required:!0},isDisabled:{type:Boolean,required:!1}},computed:{salesChannelRepository(){return this.repositoryFactory.create("sales_channel")}},data(){return{isModalActive:!1,isRegistering:!1,isRegistrationSuccessful:!1,isDataLoading:!1,selection:{},selectedDomain:null,entitySelection:{},salesChannels:{}}},created(){this.createdComponent()},methods:{createdComponent(){this.loadData()},loadData(e,t){let n=this;n.isDataLoading=!0;let a=new P(e,t);a.addAssociation("domains"),this.salesChannelRepository.search(a,Shopware.Context.api).then(e=>{n.salesChannels=e,n.isDataLoading=!1})},onPageChange(e){this.loadData(e.page,e.limit)},openModal(){this.$emit("modal-open"),this.isModalActive=!0},closeModal(){this.isModalActive=!1},registerWebhooks(){let e=this;this.isRegistrationSuccessful=!1,this.isRegistering=!0,this.UnzerPaymentConfigurationService.registerWebhooks({selection:this.entitySelection}).then(t=>{e.isRegistrationSuccessful=!0,void 0!==t&&e.messageGeneration(t),this.$emit("webhook-registered",t)}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.webhook.globalError.title"),message:this.$tc("unzer-payment-settings.webhook.globalError.message")})}).finally(()=>{e.isRegistering=!1})},onRegistrationFinished(){this.isRegistrationSuccessful=!1,this.selection={}},onSelectItem(e,t){console.log(e,t),t&&(t.privateKey=this.privateKey,this.entitySelection[t.salesChannelId]=t)},messageGeneration(e){let t=e.length;Object.keys(e).forEach(n=>{e[n].success?this.createNotificationSuccess({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n}):this.createNotificationError({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n})})},isWebhookRegisteredForSalesChannel(e){let t=!1,n=this.getSalesChannelById(e);return!!this.webhooks.length&&(n.domains.forEach(e=>{this.webhooks.forEach(n=>{if(n.url.indexOf(e.url)>-1)return t=!0,!0})}),t)},getSalesChannelById(e){let t=null;return this.salesChannels.forEach(n=>{if(n.id===e)return t=n,!0}),t},getSalesChannelDomainCriteria(e){let t=new P;return t.addFilter(P.prefix("url","https://")),t.addFilter(P.equals("salesChannelId",e)),t}}});let{Component:z,Mixin:S,Context:_}=Shopware;z.register("unzer-webhooks-modal",{template:'<sw-modal\n    :title="$tc(`unzer-payment-settings.modal.webhook.title`)"\n    class="unzer--webhook-card"\n    @modal-close="$emit(\'modal-close\')"\n>\n    <sw-alert\n        v-if="!isLoadingWebhooks && (!webhooks.length || webhooks.length === 0)"\n        variant="warning"\n        appearance="default"\n        :showIcon="true"\n        :closable="false">\n        {{ $tc(\'unzer-payment-settings.webhook.empty\') }}\n    </sw-alert>\n\n    <div v-else>\n        <sw-data-grid\n            ref="webhookDataGrid"\n            v-on:select-item="onSelectWebhook"\n            :showActions="false"\n            :showSelection="true"\n            :dataSource="webhooks"\n            :isLoading="isLoadingWebhooks"\n            :columns="webhookColumns">\n        </sw-data-grid>\n\n        <sw-button-process\n            @click="clearWebhooks(keyPair.privateKey)"\n            @process-finish="onClearingFinished()"\n            :isLoading="isLoadingWebhooks || isClearing"\n            :processSuccess="isClearingSuccessful"\n            :disabled="isLoadingWebhooks || isClearing || webhookSelectionLength == 0"\n            variant="danger">\n            {{ $tc(\'unzer-payment-settings.modal.webhook.submit.clear\', webhookSelectionLength, {count: webhookSelectionLength}) }}\n        </sw-button-process>\n    </div>\n</sw-modal>\n',mixins:[S.getByName("notification")],inject:["UnzerPaymentConfigurationService"],props:{keyPair:{type:Array,required:!0},webhooks:{type:Array,required:!0},isLoadingWebhooks:{type:Boolean}},data(){return{isClearing:!1,isClearingSuccessful:!1,webhookSelection:null,webhookSelectionLength:0}},computed:{webhookColumns(){return[{property:"event",dataIndex:"event",label:"Event"},{property:"url",dataIndex:"url",label:"URL"}]}},methods:{clearWebhooks(e){let t=this;this.isClearingSuccessful=!1,this.isClearing=!0,this.isLoading=!0,this.UnzerPaymentConfigurationService.clearWebhooks({privateKey:e,selection:this.webhookSelection}).then(n=>{t.isClearingSuccessful=!0,t.webhookSelection=[],t.webhookSelectionLength=0,t.$refs.webhookDataGrid.resetSelection(),t.$emit("load-webhooks",e),void 0!==n&&t.messageGeneration(n)}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.webhook.globalError.title"),message:this.$tc("unzer-payment-settings.webhook.globalError.message")})}).finally(()=>{t.isLoading=!1,t.isClearing=!1})},onClearingFinished(){this.isClearingSuccessful=!1,this.isClearing=!1},onSelectWebhook(e){this.webhookSelectionLength=Object.keys(e).length,this.webhookSelection=e},messageGeneration(e){let t=e.length;Object.keys(e).forEach(n=>{e[n].success?this.createNotificationSuccess({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n}):this.createNotificationError({title:this.$tc(e[n].message,t),message:this.$tc("unzer-payment-settings.webhook.messagePrefix",t)+n})})}}}),n(858),Shopware.Component.register("unzer-payment-apple-pay-certificates",{template:'{% block unzer_payment_apple_pay_certificates %}\n    <sw-container :title="$tc(`unzer-payment-settings.apple-pay.certificates.title`)"\n                  class="unzer-payment-settings--apple-pay-certificates">\n        <template v-show="!isLoading">\n            {% block unzer_payment_apple_pay_certificates_form %}\n                <div v-if="parentConfigData[\'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\']">\n                    <sw-alert\n                            variant="info"\n                            appearance="default"\n                            :showIcon="true"\n                            :closable="false">\n                        <div v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.textExisting\')"></div>\n                    </sw-alert>\n                </div>\n                <div>\n                    <sw-alert\n                            variant="info"\n                            appearance="default"\n                            :showIcon="true"\n                            :closable="false">\n                        <div v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.textAll\')"></div>\n                    </sw-alert>\n                </div>\n                <sw-inherit-wrapper\n                    ref="inheritWrapperPaymentProcessingCertificate"\n                    :label="$tc(\'unzer-payment-settings.apple-pay.paymentProcessingCertificate.label\')"\n                    v-model:value="parentConfigData[\'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\']"\n                    :inheritedValue="getInheritedValue(\'applePayPaymentProcessingCertificateId\')"\n                    :hasParent="isNotDefaultSalesChannel"\n                    >\n                    <template #content="props">\n                        <sw-label\n                            v-if="!isDataLoading"\n                            :variant="paymentProcessingValid ? \'success\' : \'danger\'"\n                            appearance="pill"\n                            v-tooltip="$tc(\'unzer-payment-settings.apple-pay.certificates.check.paymentProcessingValid.\' + paymentProcessingValid.toString())">\n                            <sw-icon :name="paymentProcessingValid ? \'regular-checkmark-s\' : \'regular-exclamation-circle\'" :small="true"></sw-icon>\n                            <span v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.check.paymentProcessingValid.\' + paymentProcessingValid.toString())"></span>\n                        </sw-label><br>\n                        <sw-label\n                                v-if="!isDataLoading"\n                                :variant="paymentProcessingActive ? \'success\' : \'danger\'"\n                                appearance="pill"\n                                v-tooltip="$tc(\'unzer-payment-settings.apple-pay.certificates.check.paymentProcessingActive.\' + paymentProcessingActive.toString())">\n                            <sw-icon :name="paymentProcessingActive ? \'regular-checkmark-s\' : \'regular-exclamation-circle\'" :small="true"></sw-icon>\n                            <span v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.check.paymentProcessingActive.\' + paymentProcessingActive.toString())"></span>\n                        </sw-label>\n                        <sw-loader size="10px" v-else></sw-loader>\n                        <br>\n                        <small v-html="$tc(\'unzer-payment-settings.apple-pay.paymentProcessingCertificate.helpText\')"></small>\n\n                        <sw-file-input\n                            ref="paymentProcessingCertificateInput"\n                            class="sw-field sw-block-field"\n                            v-model:value="paymentProcessingCertificate"\n                            @change="onInputChangePaymentProcessing"\n                        >\n                        </sw-file-input>\n                    </template>\n                </sw-inherit-wrapper>\n\n                <sw-inherit-wrapper\n                    ref="inheritWrapperPaymentProcessingKey"\n                    :label="$tc(\'unzer-payment-settings.apple-pay.paymentProcessingKey.label\')"\n                    v-model:value="parentConfigData[\'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\']"\n                    :inheritedValue="getInheritedValue(\'applePayPaymentProcessingCertificateId\')"\n                    :hasParent="isNotDefaultSalesChannel"\n                >\n                    <template #content="props">\n                        <sw-file-input\n                            ref="paymentProcessingKeyInput"\n                            class="sw-field sw-block-field"\n                            v-model:value="paymentProcessingKey"\n                            @change="onInputChangePaymentProcessing"\n                        >\n                        </sw-file-input>\n                    </template>\n                </sw-inherit-wrapper>\n\n                <sw-inherit-wrapper\n                    ref="inheritWrapperMerchantIdentificationCertificate"\n                    :label="$tc(\'unzer-payment-settings.apple-pay.merchantIdentificationCertificate.label\')"\n                    v-model:value="parentConfigData[\'UnzerPayment6.settings.applePayMerchantIdentificationCertificateId\']"\n                    :inheritedValue="getInheritedValue(\'applePayMerchantIdentificationCertificateId\')"\n                    :hasParent="isNotDefaultSalesChannel"\n                >\n                    <template #content="props">\n                        <sw-label\n                            v-if="!isDataLoading"\n                            :variant="merchantIdentificationValid ? \'success\' : \'danger\'"\n                            appearance="pill"\n                            v-tooltip="$tc(\'unzer-payment-settings.apple-pay.certificates.check.merchantIdentificationValid.\' + merchantIdentificationValid.toString())">\n                            <sw-icon :name="merchantIdentificationValid ? \'regular-checkmark-s\' : \'regular-exclamation-circle\'" :small="true"></sw-icon>\n                            <span v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.check.merchantIdentificationValid.\' + merchantIdentificationValid.toString())"></span>\n                        </sw-label>\n                        <sw-loader size="10px" v-else></sw-loader>\n                        <br>\n                        <sw-label\n                            v-if="!isDataLoading && merchantIdentificationValidUntil !== null"\n                            :variant="(merchantIdentificationValidUntil > now) ? \'success\' : \'warning\'"\n                            appearance="pill"\n                            v-tooltip="$tc(\'unzer-payment-settings.apple-pay.certificates.check.merchantIdentificationValidUntil.\' + (merchantIdentificationValidUntil > now).toString())">\n                            <sw-icon name="regular-clock" :small="true"></sw-icon>\n                            <span v-html="$tc(\'unzer-payment-settings.apple-pay.certificates.check.merchantIdentificationValidUntil.\' + (merchantIdentificationValidUntil > now).toString())"></span>\n                        </sw-label>\n                        <br>\n                        <small v-html="$tc(\'unzer-payment-settings.apple-pay.merchantIdentificationCertificate.helpText\')"></small>\n\n                        <sw-file-input\n                            ref="merchantIdentificationCertificateInput"\n                            class="sw-field sw-block-field"\n                            v-model:value="merchantIdentificationCertificate"\n                            @change="onInputChangeMerchantIdentification"\n                        >\n                        </sw-file-input>\n                    </template>\n                </sw-inherit-wrapper>\n\n                <sw-inherit-wrapper\n                    ref="inheritWrapperMerchantIdentificationKey"\n                    :label="$tc(\'unzer-payment-settings.apple-pay.merchantIdentificationKey.label\')"\n                    v-model:value="parentConfigData[\'UnzerPayment6.settings.applePayMerchantIdentificationCertificateId\']"\n                    :inheritedValue="getInheritedValue(\'applePayMerchantIdentificationCertificateId\')"\n                    :hasParent="isNotDefaultSalesChannel"\n                >\n                    <template #content="props">\n                        <sw-file-input\n                            ref="merchantIdentificationKeyInput"\n                            class="sw-field sw-block-field"\n                            v-model:value="merchantIdentificationKey"\n                            @change="onInputChangeMerchantIdentification"\n                        >\n                        </sw-file-input>\n                    </template>\n                </sw-inherit-wrapper>\n            {% endblock %}\n        </template>\n    </sw-container>\n{% endblock %}\n',mixins:[Shopware.Mixin.getByName("notification")],inject:["repositoryFactory","UnzerPaymentApplePayService"],props:{isLoading:{type:Boolean,required:!1},selectedSalesChannelId:{type:String,required:!1},parentRefs:{required:!0}},data(){return{isUpdating:!1,isUpdateSuccessful:!1,isDataLoading:!1,paymentProcessingCertificate:!1,paymentProcessingKey:!1,merchantIdentificationCertificate:!1,merchantIdentificationKey:!1,merchantIdentificationValid:!1,merchantIdentificationValidUntil:null,paymentProcessingValid:!1,paymentProcessingActive:!1}},computed:{isNotDefaultSalesChannel(){return null!==this.selectedSalesChannelId},now(){return Date.now()},parentConfigData(){return this.parentRefs&&this.parentRefs.systemConfig&&this.parentRefs.systemConfig.actualConfigData&&this.parentRefs.systemConfig.actualConfigData[this.selectedSalesChannelId]||{}}},created(){this.createdComponent()},methods:{createdComponent(){this.loadData()},loadData(){this.checkCertificates()},checkCertificates(){let e=this;e.isDataLoading=!0,this.UnzerPaymentApplePayService.checkCertificates(this.selectedSalesChannelId).then(e=>{void 0!==e&&(this.merchantIdentificationValid=e.merchantIdentificationValid,this.merchantIdentificationValidUntil=e.merchantIdentificationValidUntil?new Date(e.merchantIdentificationValidUntil):null,this.paymentProcessingValid=e.paymentProcessingValid,this.paymentProcessingActive=e.paymentProcessingActive)}).finally(()=>{e.isDataLoading=!1})},onSave(){return this.updateCertificates()},resetFileFieldsMerchantIdentification(){this.$refs.merchantIdentificationCertificateInput.onRemoveIconClick(),this.$refs.merchantIdentificationKeyInput.onRemoveIconClick()},resetFileFieldsPaymentProcessing(){this.$refs.paymentProcessingCertificateInput.onRemoveIconClick(),this.$refs.paymentProcessingKeyInput.onRemoveIconClick()},updateCertificates(){let e=this;return(this.isUpdateSuccessful=!1,this.isUpdating=!0,this.paymentProcessingCertificate||this.paymentProcessingKey||this.merchantIdentificationCertificate||this.merchantIdentificationKey||this.$refs.inheritWrapperMerchantIdentificationCertificate.isInherited||this.$refs.inheritWrapperPaymentProcessingCertificate.isInherited)?this.UnzerPaymentApplePayService.updateCertificates(this.selectedSalesChannelId,{paymentProcessingCertificate:this.paymentProcessingCertificate,paymentProcessingKey:this.paymentProcessingKey,merchantIdentificationCertificate:this.merchantIdentificationCertificate,merchantIdentificationKey:this.merchantIdentificationKey},this.$refs.inheritWrapperMerchantIdentificationCertificate.isInherited,this.$refs.inheritWrapperPaymentProcessingCertificate.isInherited).then(t=>{e.isUpdateSuccessful=!0,e.createNotificationSuccess({title:e.$tc("unzer-payment-settings.apple-pay.certificates.update.success.title"),message:e.$tc("unzer-payment-settings.apple-pay.certificates.update.success.message")}),e.$emit("certificate-updated",t),e.parentRefs.systemConfig.loadCurrentSalesChannelConfig?e.parentRefs.systemConfig.loadCurrentSalesChannelConfig():(delete e.parentRefs.systemConfig.actualConfigData[this.selectedSalesChannelId],e.parentRefs.systemConfig.readAll()),e.checkCertificates(),e.resetFileFieldsPaymentProcessing(),e.resetFileFieldsMerchantIdentification()}).catch(t=>{let n="unzer-payment-settings.apple-pay.certificates.update.error.message";t&&t.response&&t.response.data&&t.response.data.message&&(n=t.response.data.message);let a={};t&&t.response&&t.response.data&&t.response.data.translationData&&(a=t.response.data.translationData),e.createNotificationError({title:e.$tc("unzer-payment-settings.apple-pay.certificates.update.error.title"),message:e.$t(n,a)})}).finally(()=>{e.isUpdating=!1}):(this.isUpdateSuccessful=!0,this.isUpdating=!1,Promise.resolve())},onInputChangePaymentProcessing(e){e&&this.$refs.inheritWrapperPaymentProcessingCertificate.removeInheritance()},onInputChangeMerchantIdentification(e){e&&this.$refs.inheritWrapperMerchantIdentificationCertificate.removeInheritance()},getInheritedValue(e){let t=this.parentRefs.systemConfig;return t?t.getInheritedValue&&t.actualConfigData.null?t.getInheritedValue({name:"UnzerPayment6.settings."+e,type:"text"}):t.actualConfigData.null&&t.actualConfigData.null["UnzerPayment6.settings."+e]||null:null}}});let{Component:D}=Shopware;D.register("unzer-payment-plugin-icon",{template:'{% block unzer_plugin_icon %}\n    <img class="unzer-payment-icon" :src="assetFilter(\'unzerpayment6/plugin.png\')">\n{% endblock %}\n',computed:{assetFilter(){return Shopware.Filter.getByName("asset")}}});let{Component:I}=Shopware;I.override("sw-system-config",{template:'{% block sw_system_config_content_card_field %}\n    <template v-if="element.name != \'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\' && element.name != \'UnzerPayment6.settings.applePayMerchantIdentificationCertificateId\'">\n        {% parent() %}\n\n        <template v-if="element.name == \'UnzerPayment6.settings.publicKey\' && ((actualConfigData[currentSalesChannelId] && actualConfigData[currentSalesChannelId][\'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\']) || (actualConfigData.null && actualConfigData.null[\'UnzerPayment6.settings.applePayPaymentProcessingCertificateId\']))">\n            <sw-label\n                variant="info"\n                appearance="pill">\n                <sw-icon name="regular-info-circle" :small="true"></sw-icon>\n                <small v-html="$tc(\'unzer-payment-settings.apple-pay.publicKey.changeNotice\')"></small>\n            </sw-label>\n            <br><br>\n        </template>\n\n        <template v-if="element.name == \'UnzerPayment6.settings.googlePayMerchantName\'">\n            <sw-text-field :value="unzerGooglePayGatewayMerchantId"\n                           :label="$tc(\'unzer-payment-settings.google-pay.gatewayMerchantId\')"\n                           disabled>\n            </sw-text-field>\n        </template>\n    </template>\n{% endblock %}\n',inject:["UnzerPaymentConfigurationService"],data(){return{readOnlyUnzerGooglePayGatewayMerchantId:{}}},watch:{currentSalesChannelId(){this.getUnzerGooglePayGatewayMerchantId(),this.$emit("sales-channel-changed",this.actualConfigData[this.currentSalesChannelId],this.currentSalesChannelId)}},computed:{unzerGooglePayGatewayMerchantId(){return this.readOnlyUnzerGooglePayGatewayMerchantId||""}},methods:{async createdComponent(){await this.$super("createdComponent"),this.getUnzerGooglePayGatewayMerchantId()},getUnzerGooglePayGatewayMerchantId(){"UnzerPayment6.settings"===this.domain&&this.UnzerPaymentConfigurationService.getGooglePayGatewayMerchantId(this.currentSalesChannelId).then(e=>{this.readOnlyUnzerGooglePayGatewayMerchantId=e.gatewayMerchantId}).catch(()=>{})}}}),n(569);let{Component:$,Mixin:R,Context:M}=Shopware;$.register("unzer-payment-settings",{template:'{% block unzer_payment_settings %}\n    <sw-page class="unzer-payment-settings">\n        {% block unzer_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon :name="arrowIconName" small></sw-icon>\n                    {{ $tc(\'unzer-payment-settings.module.title\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block unzer_payment_settings_actions %}\n            <template #smart-bar-actions>\n                {% block unzer_payment_settings_actions_save %}\n                    <sw-button-process\n                        class="sw-settings-login-registration__save-action"\n                        :isLoading="isLoading"\n                        :disabled="isLoading || selectedKeyPairForTesting"\n                        :processSuccess="isSaveSuccessful"\n                        @process-finish="isSaveSuccessful = false"\n                        variant="primary"\n                        @click="onSave">\n                        {{ $tc(\'global.default.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block unzer_payment_settings_content %}\n            <template #content>\n                <sw-card-view>\n                    <sw-system-config\n                        ref="systemConfig"\n                        salesChannelSwitchable\n                        inherit\n                        @config-changed="onConfigChange"\n                        @loading-changed="onLoadingChanged"\n                        @sales-channel-changed="onSalesChannelChanged"\n                        domain="UnzerPayment6.settings">\n                        <template #afterElements="{index}">\n                            <template v-if="index == 0">\n                                <sw-button\n                                    @click="openModalKeyPair = defaultKeyPair"\n                                    :disabled="!isShowWebhooksButtonEnabled(defaultKeyPair)"\n                                >\n                                    {{ $tc(\'unzer-payment-settings.webhook.show\') }}\n                                </sw-button>\n\n                                <unzer-payment-register-webhook\n                                    :isLoading="isLoading"\n                                    :isDisabled="!isRegisterWebhooksButtonEnabled(defaultKeyPair)"\n                                    :webhooks="webhooks"\n                                    :selectedSalesChannelId="selectedSalesChannelId"\n                                    :privateKey="defaultKeyPair.privateKey"\n                                    @modal-open="loadWebhooks(defaultKeyPair.privateKey)"\n                                    @webhook-registered="onWebhookRegistered(defaultKeyPair.privateKey)">\n                                </unzer-payment-register-webhook>\n\n                                <sw-button-process\n                                    :isLoading="selectedKeyPairForTesting === defaultKeyPair || isLoading"\n                                    :disabled="selectedKeyPairForTesting === defaultKeyPair || !isRegisterWebhooksButtonEnabled(defaultKeyPair)"\n                                    :processSuccess="selectedKeyPairForTesting === defaultKeyPair && isTestSuccessful"\n                                    @process-finish="onTestFinished()"\n                                    @click="onValidateCredentials(defaultKeyPair)">\n                                    {{ $tc(\'unzer-payment-settings.form.testButton\') }}\n                                </sw-button-process>\n                            </template>\n                        </template>\n                    </sw-system-config>\n\n                    <sw-card\n                        :is-loading="isLoading"\n                        :title="$tc(`unzer-payment-settings.apple-pay.certificates.title`)"\n                        class="unzer--apple-pay-card"\n                    >\n                        <unzer-payment-apple-pay-certificates\n                            ref="applePayCertificates"\n                            :selectedSalesChannelId="selectedSalesChannelId"\n                            :parentRefs="$refs"\n                            :isLoading="isLoading">\n                        </unzer-payment-apple-pay-certificates>\n                    </sw-card>\n\n                    <template v-for="keyPairSetting in keyPairSettings" :key="keyPairSetting.key">\n                        <sw-card :title="keyPairSettingTitle(keyPairSetting)">\n                            <sw-text-field\n                                :label="$tc(\'unzer-payment-settings.form.publicKey\')"\n                                class="sw-field sw-block-field"\n                                :value="keyPairSetting.publicKey"\n                                @update:value="setPublicKey(keyPairSetting, $event)"\n                            ></sw-text-field>\n                            <sw-text-field\n                                :label="$tc(\'unzer-payment-settings.form.privateKey\')"\n                                class="sw-field sw-block-field"\n                                :value="keyPairSetting.privateKey"\n                                @update:value="setPrivateKey(keyPairSetting, $event)"\n                            ></sw-text-field>\n\n                            <template #footer>\n                                <sw-button\n                                    @click="openModalKeyPair = keyPairSetting"\n                                    :disabled="!isShowWebhooksButtonEnabled(keyPairSetting)"\n                                >\n                                    {{ $tc(\'unzer-payment-settings.webhook.show\') }}\n                                </sw-button>\n\n                                <unzer-payment-register-webhook\n                                    :isLoading="isLoading"\n                                    :isDisabled="!isRegisterWebhooksButtonEnabled(keyPairSetting)"\n                                    :webhooks="webhooks"\n                                    :selectedSalesChannelId="selectedSalesChannelId"\n                                    :privateKey="keyPairSetting.privateKey"\n                                    @modal-open="loadWebhooks(keyPairSetting.privateKey)"\n                                    @webhook-registered="onWebhookRegistered(keyPairSetting.privateKey)">\n                                </unzer-payment-register-webhook>\n\n                                <sw-button-process\n                                    :isLoading="selectedKeyPairForTesting === keyPairSetting || isLoading"\n                                    :disabled="selectedKeyPairForTesting === keyPairSetting || !isRegisterWebhooksButtonEnabled(keyPairSetting)"\n                                    :processSuccess="selectedKeyPairForTesting === keyPairSetting && isTestSuccessful"\n                                    @process-finish="onTestFinished()"\n                                    @click="onValidateCredentials(keyPairSetting)">\n                                    {{ $tc(\'unzer-payment-settings.form.testButton\') }}\n                                </sw-button-process>\n                            </template>\n                        </sw-card>\n                    </template>\n                    <unzer-webhooks-modal\n                        v-show="openModalKeyPair"\n                        :keyPair="openModalKeyPair"\n                        :webhooks="webhooks"\n                        :isLoadingWebhooks="isLoadingWebhooks"\n                        @modal-close="openModalKeyPair = false"\n                        @load-webhooks="loadWebhooks"\n                    ></unzer-webhooks-modal>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',mixins:[R.getByName("notification"),R.getByName("sw-inline-snippet")],inject:["repositoryFactory","UnzerPaymentConfigurationService"],data(){return{isLoading:!0,isLoadingWebhooks:!0,selectedKeyPairForTesting:!1,isTestSuccessful:!1,isSaveSuccessful:!1,config:{},webhooks:[],loadedWebhooksPrivateKey:!1,selectedSalesChannelId:null,keyPairSettings:[{key:"b2b-eur",group:"paylaterInvoice"},{key:"b2b-chf",group:"paylaterInvoice"},{key:"b2c-eur",group:"paylaterInvoice"},{key:"b2c-chf",group:"paylaterInvoice"},{key:"b2c-eur",group:"paylaterInstallment"},{key:"b2c-chf",group:"paylaterInstallment"},{key:"b2c-eur",group:"paylaterDirectDebitSecured"}],openModalKeyPair:null}},metaInfo(){return{title:"UnzerPayment"}},computed:{paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},arrowIconName(){return M.app.config.version.match(/((\d+)\.?(\d+?)\.?(\d+)?\.?(\d*))-?([A-z]+?\d+)?/i)[3]>=5?"regular-chevron-right-xs":"small-arrow-medium-right"},defaultKeyPair(){return{privateKey:this.getConfigValue("privateKey"),publicKey:this.getConfigValue("publicKey")}}},watch:{openModalKeyPair(e){e&&e.privateKey!==this.loadedWebhooksPrivateKey&&this.loadWebhooks(e.privateKey)}},methods:{getConfigValue(e){if(!this.config||!this.$refs.systemConfig||!this.$refs.systemConfig.actualConfigData||!this.$refs.systemConfig.actualConfigData.null)return"";let t=this.$refs.systemConfig.actualConfigData.null;return this.config[`UnzerPayment6.settings.${e}`]||t[`UnzerPayment6.settings.${e}`]},onValidateCredentials(e){this.isTestSuccessful=!1,this.selectedKeyPairForTesting=e;let t=this.getArrayKeyOfKeyPairSetting(e),n=e;-1!==t&&(n=this.keyPairSettings[t]);let a={publicKey:n.publicKey,privateKey:n.privateKey,salesChannel:this.$refs.systemConfig.currentSalesChannelId};this.UnzerPaymentConfigurationService.validateCredentials(a).then(()=>{this.createNotificationSuccess({title:this.$tc("unzer-payment-settings.form.message.success.title"),message:this.$tc("unzer-payment-settings.form.message.success.message")}),this.isTestSuccessful=!0,this.selectedKeyPairForTesting=!1}).catch(()=>{this.createNotificationError({title:this.$tc("unzer-payment-settings.form.message.error.title"),message:this.$tc("unzer-payment-settings.form.message.error.message")}),this.onTestFinished()})},onTestFinished(){this.selectedKeyPairForTesting=!1,this.isTestSuccessful=!1},setPublicKey(e,t){this.keyPairSettings[this.getArrayKeyOfKeyPairSetting(e)].publicKey=t},setPrivateKey(e,t){this.keyPairSettings[this.getArrayKeyOfKeyPairSetting(e)].privateKey=t},getArrayKeyOfKeyPairSetting(e){return this.keyPairSettings.findIndex(t=>t.key===e.key&&t.group===e.group)},onSave(){this.isLoading=!0,["paylaterInvoice","paylaterInstallment","paylaterDirectDebitSecured"].forEach(e=>{this.config[`UnzerPayment6.settings.${e}`]=[]}),this.keyPairSettings.reduce((e,t)=>(t&&t.privateKey&&t.publicKey&&e[`UnzerPayment6.settings.${t.group}`].push(t),e),this.config),this.$refs.systemConfig.saveAll().then(()=>{this.isSaveSuccessful=!0;let e=this.$tc("sw-plugin-config.messageSaveSuccess");"sw-plugin-config.messageSaveSuccess"===e&&(e=this.$tc("sw-extension-store.component.sw-extension-config.messageSaveSuccess")),this.createNotificationSuccess({title:this.$tc("global.default.success"),message:e}),this.$refs.applePayCertificates.onSave().then(()=>{this.isLoading=!1})}).catch(e=>{this.isSaveSuccessful=!1,this.createNotificationError({title:this.$tc("global.default.error"),message:e}),this.isLoading=!1})},onConfigChange(e){this.config=e,this.isLoading=!1,this.syncKeyPairConfig(),this.$refs.applePayCertificates.loadData()},onLoadingChanged(e){this.isLoading=e},onSalesChannelChanged(e,t){e&&this.onConfigChange(e),this.selectedSalesChannelId=t},onWebhookRegistered(e){this.loadWebhooks(e)},loadWebhooks(e){this.isLoadingWebhooks=!0,this.UnzerPaymentConfigurationService.getWebhooks(e).then(t=>{this.webhooks=t,this.webhookSelection=null,this.webhookSelectionLength=0,this.loadedWebhooksPrivateKey=e}).catch(()=>{this.webhooks=[],this.loadedWebhooksPrivateKey=!1}).finally(()=>{this.isLoadingWebhooks=!1,this.isClearingSuccessful=!1})},getBind(e,t){let n;return t!==this.config&&(this.config=t),this.$refs.systemConfig.config.forEach(t=>{t.elements.forEach(t=>{if(t.name===e.name){n=t;return}})}),n||e},keyPairSettingTitle(e){return this.$tc(`unzer-payment.methods.${e.group}.${e.key}`)},isShowWebhooksButtonEnabled(e){return e&&e.privateKey&&e.publicKey},isRegisterWebhooksButtonEnabled(e){return!this.isLoading&&e&&e.privateKey},syncKeyPairConfig(){let e=this;["paylaterInvoice","paylaterInstallment","paylaterDirectDebitSecured"].forEach(t=>{this.config[`UnzerPayment6.settings.${t}`]&&this.config[`UnzerPayment6.settings.${t}`].forEach(t=>{e.keyPairSettings.forEach((e,n,a)=>{e.group===t.group&&e.key===t.key&&(a[n]=t)})})})}}});let{Module:A}=Shopware;A.register("unzer-payment-configuration",{type:"plugin",name:"UnzerPayment",title:"unzer-payment-settings.module.title",description:"unzer-payment-settings.module.description",version:"1.1.0",targetVersion:"1.1.0",snippets:{"de-DE":k,"en-GB":C},routes:{settings:{component:"unzer-payment-settings",path:"settings",meta:{parentPath:"sw.settings.index"}}},settingsItem:{name:"unzer-payment-configuration",to:"unzer.payment.configuration.settings",label:"unzer-payment-settings.module.title",group:"plugins",iconComponent:"unzer-payment-plugin-icon",backgroundEnabled:!1}}),n(962),n(443),n(547),Shopware.Component.override("sw-payment-card",{template:'{% block sw_payment_card_description %}\n    <div class="sw-payment-card__description">\n        <div v-if="paymentMethod.customFields && paymentMethod.customFields.isDeprecated">\n            <sw-label\n                    variant="danger"\n                    size="medium"\n            >\n                {{ $tc(\'sw-payment-card.deprecated\') }}\n            </sw-label>\n        </div>\n        <div v-html="paymentMethod.translated.description"></div>\n    </div>\n{% endblock %}',snippets:{"de-DE":k,"en-GB":C}}),n(467)}()})();